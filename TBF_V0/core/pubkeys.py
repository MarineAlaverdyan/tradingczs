"""
–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º Solana.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ä–∞—Å—á–µ—Ç–∞ PDA –∞–¥—Ä–µ—Å–æ–≤.
"""

from solders.pubkey import Pubkey


# === –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–ì–†–ê–ú–ú–´ ===

# System Program ID
SYSTEM_PROGRAM_ID = Pubkey.from_string("11111111111111111111111111111111")

# SPL Token program ID
TOKEN_PROGRAM_ID = Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")

# Associated Token Account program ID  
ASSOCIATED_TOKEN_PROGRAM_ID = Pubkey.from_string("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")

# Compute Budget Program ID (–¥–ª—è priority fees)
COMPUTE_BUDGET_PROGRAM_ID = Pubkey.from_string("ComputeBudget111111111111111111111111111111")

# Rent Program ID
RENT_PROGRAM_ID = Pubkey.from_string("SysvarRent111111111111111111111111111111111")


# === PUMP.FUN –ü–†–û–ì–†–ê–ú–ú–´ ===

# Pump.fun main program ID
PUMP_PROGRAM_ID = Pubkey.from_string("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P")

# Pump.fun fee recipient
PUMP_FEE_RECIPIENT = Pubkey.from_string("CebN5WGQ4jvEPvsVU4EoHEpgzq1VV7AbicfhtW4xC9iM")

# Pump.fun global account
PUMP_GLOBAL = Pubkey.from_string("4wTV1YmiEkRvAtNtsSGPtUrqRYQMe5SKy2uB4Jjaxnjf")

# Pump.fun fee config program
PUMP_FEE_CONFIG_PROGRAM = Pubkey.from_string("pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ")

# Pump.fun fee config account - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–∞–∫ –∞–∫–∫–∞—É–Ω—Ç
PUMP_FEE_CONFIG_ACCOUNT = Pubkey.from_string("pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ")


# === METAPLEX –ü–†–û–ì–†–ê–ú–ú–´ ===

# Metaplex Token Metadata program ID
METADATA_PROGRAM_ID = Pubkey.from_string("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")


# === RAYDIUM –ü–†–û–ì–†–ê–ú–ú–´ (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏) ===

# Raydium AMM program ID
RAYDIUM_AMM_PROGRAM_ID = Pubkey.from_string("675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8")

# Raydium Authority
RAYDIUM_AUTHORITY = Pubkey.from_string("5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1")


# === WRAPPED SOL ===

# Wrapped SOL mint address
WSOL_MINT = Pubkey.from_string("So11111111111111111111111111111111111111112")


# === –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –†–ê–°–ß–ï–¢–û–í ===

# Lamports –≤ 1 SOL
LAMPORTS_PER_SOL = 1_000_000_000

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
ACCOUNT_SIZE_TOKEN = 165  # bytes
ACCOUNT_SIZE_MINT = 82    # bytes
ACCOUNT_SIZE_METADATA = 679  # bytes (–ø—Ä–∏–º–µ—Ä–Ω–æ)


# === HELPER –§–£–ù–ö–¶–ò–ò ===

def get_all_program_ids() -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ program ID –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –∏—Ö ID
    """
    return {
        'system': SYSTEM_PROGRAM_ID,
        'token': TOKEN_PROGRAM_ID,
        'associated_token': ASSOCIATED_TOKEN_PROGRAM_ID,
        'compute_budget': COMPUTE_BUDGET_PROGRAM_ID,
        'rent': RENT_PROGRAM_ID,
        'pump_fun': PUMP_PROGRAM_ID,
        'pump_fee_config': PUMP_FEE_CONFIG_PROGRAM,
        'metadata': METADATA_PROGRAM_ID,
        'raydium_amm': RAYDIUM_AMM_PROGRAM_ID,
        'wsol_mint': WSOL_MINT
    }


def validate_program_id(program_id: Pubkey, expected_name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å program ID.
    
    Args:
        program_id: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–≥—Ä–∞–º–º—ã
        expected_name: –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        
    Returns:
        True –µ—Å–ª–∏ program ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    """
    all_programs = get_all_program_ids()
    expected_id = all_programs.get(expected_name)
    
    if not expected_id:
        return False
        
    return program_id == expected_id


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üîë –ü—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–æ–≥—Ä–∞–º–º Solana")
    print("=" * 50)
    
    programs = get_all_program_ids()
    for name, pubkey in programs.items():
        print(f"{name:20}: {pubkey}")
    
    print(f"\nüí∞ LAMPORTS_PER_SOL: {LAMPORTS_PER_SOL:,}")
    print(f"üì¶ Token account size: {ACCOUNT_SIZE_TOKEN} bytes")
    print(f"ü™ô Mint account size: {ACCOUNT_SIZE_MINT} bytes")
