"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Solana –∫–æ—à–µ–ª—å–∫–æ–º.
–¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞.
"""

import base58
from typing import Optional
from solders.keypair import Keypair
from solders.pubkey import Pubkey


class SimpleWallet:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Solana."""
    
    def __init__(self, private_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞.
        
        Args:
            private_key: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ base58 —Å—Ç—Ä–æ–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.keypair: Optional[Keypair] = None
        
        if private_key:
            self.load_from_private_key(private_key)
    
    def load_from_private_key(self, private_key: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
        
        Args:
            private_key: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ base58 —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
            
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–∞
        """
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base58 —Å—Ç—Ä–æ–∫—É –≤ –±–∞–π—Ç—ã
            private_key_bytes = base58.b58decode(private_key)
            
            # –°–æ–∑–¥–∞–µ–º keypair –∏–∑ –±–∞–π—Ç–æ–≤
            self.keypair = Keypair.from_bytes(private_key_bytes)
            
            return True
            
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {e}")
    
    def generate_new(self) -> str:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫.
        
        Returns:
            –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base58
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π keypair
        self.keypair = Keypair()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ base58 —Ñ–æ—Ä–º–∞—Ç–µ
        return base58.b58encode(bytes(self.keypair)).decode('utf-8')
    
    def get_public_key(self) -> Pubkey:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞.
        
        Returns:
            –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–∞–∫ –æ–±—ä–µ–∫—Ç Pubkey
            
        Raises:
            Exception: –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        if not self.keypair:
            raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ load_from_private_key() –∏–ª–∏ generate_new()")
        
        return self.keypair.pubkey()
    
    def get_address_string(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É.
        
        Returns:
            –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base58 —Å—Ç—Ä–æ–∫–∏
        """
        pubkey = self.get_public_key()
        return str(pubkey)
    
    def get_private_key_string(self) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ —Å—Ç—Ä–æ–∫—É.
        
        Returns:
            –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ base58 —Å—Ç—Ä–æ–∫–∏
            
        Raises:
            Exception: –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        if not self.keypair:
            raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        return base58.b58encode(bytes(self.keypair)).decode('utf-8')
    
    def sign_message(self, message: bytes) -> bytes:
        """
        –ü–æ–¥–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            –ü–æ–¥–ø–∏—Å—å –≤ –±–∞–π—Ç–∞—Ö
            
        Raises:
            Exception: –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        if not self.keypair:
            raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        return self.keypair.sign_message(message)
    
    def is_loaded(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ –∫–æ—à–µ–ª–µ–∫.
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        return self.keypair is not None
    
    def get_keypair(self) -> Keypair:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç Keypair –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
        
        Returns:
            –û–±—ä–µ–∫—Ç Keypair
            
        Raises:
            Exception: –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        if not self.keypair:
            raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        return self.keypair
    
    def sign_transaction(self, transaction, recent_blockhash):
        """
        –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º.
        
        Args:
            transaction: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            recent_blockhash: Recent blockhash –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            
        Returns:
            –ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
            
        Raises:
            Exception: –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        """
        if not self.keypair:
            raise Exception("–ö–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–æ–º–æ—â—å—é keypair –∏ recent_blockhash
        signed_tx = transaction
        signed_tx.sign([self.keypair], recent_blockhash)
        return signed_tx


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SimpleWallet."""
    
    print("üîë –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å SimpleWallet")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
    wallet = SimpleWallet()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
    print("üì± –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫...")
    private_key = wallet.generate_new()
    print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {private_key[:20]}...")
    print(f"   –ê–¥—Ä–µ—Å: {wallet.get_address_string()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    print(f"   –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {wallet.is_loaded()}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–æ—à–µ–ª–µ–∫ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
    print("\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...")
    wallet2 = SimpleWallet()
    
    try:
        wallet2.load_from_private_key(private_key)
        print(f"   –ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {wallet2.get_address_string()}")
        print(f"   –ê–¥—Ä–µ—Å–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {wallet.get_address_string() == wallet2.get_address_string()}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    print("\n‚úçÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è...")
    test_message = b"Hello, Solana!"
    try:
        signature = wallet.sign_message(test_message)
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
        print(f"   –ü–æ–¥–ø–∏—Å—å: {signature.hex()[:40]}...")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    print("\n‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    empty_wallet = SimpleWallet()
    
    try:
        empty_wallet.get_public_key()
    except Exception as e:
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    try:
        empty_wallet.load_from_private_key("invalid_key")
    except Exception as e:
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
