"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥–∞–≤–µ—Ü —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è pump.fun.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ bonding curve —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import logging
import asyncio
from typing import Optional, Dict, Any
from dataclasses import dataclass
from solders.pubkey import Pubkey
from solders.transaction import Transaction
from solders.message import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class SellResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏"""
    success: bool
    transaction_signature: Optional[str] = None
    sol_received: Optional[int] = None
    tokens_sold: Optional[int] = None
    error_message: Optional[str] = None
    gas_used: Optional[int] = None


class SimpleSeller:
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥–∞–≤–µ—Ü —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ pump.fun bonding curve.
    """
    
    def __init__(self, client, wallet, address_provider, instruction_builder, priority_fee_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞.
        
        Args:
            client: SimpleClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Solana
            wallet: SimpleWallet –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            address_provider: AddressProvider –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
            instruction_builder: InstructionBuilder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            priority_fee_manager: PriorityFeeManager –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.client = client
        self.wallet = wallet
        self.address_provider = address_provider
        self.instruction_builder = instruction_builder
        self.priority_fee_manager = priority_fee_manager
        
        logger.info("SimpleSeller –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def sell_token(
        self,
        token_info,
        token_amount: Optional[int] = None,
        percentage: Optional[float] = None,
        slippage_percent: float = 5.0,
        max_retries: int = 3
    ) -> SellResult:
        """
        –ü—Ä–æ–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ pump.fun bonding curve.
        
        Args:
            token_info: TokenInfo –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
            token_amount: –¢–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            slippage_percent: –ü—Ä–æ—Ü–µ–Ω—Ç slippage (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            SellResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üí∞ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–∞ {token_info.symbol} ({token_info.mint})")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
            mint_pubkey = token_info.mint
            wallet_pubkey = self.wallet.get_public_key()
            
            current_balance = await self._get_token_balance(mint_pubkey, wallet_pubkey)
            if current_balance == 0:
                error_msg = "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"
                logger.warning(error_msg)
                return SellResult(success=False, error_message=error_msg)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            if token_amount is not None:
                tokens_to_sell = min(token_amount, current_balance)
                logger.info(f"üìä –ü—Ä–æ–¥–∞–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {tokens_to_sell} —Ç–æ–∫–µ–Ω–æ–≤")
            elif percentage is not None:
                tokens_to_sell = int(current_balance * (percentage / 100.0))
                logger.info(f"üìä –ü—Ä–æ–¥–∞–µ–º {percentage}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞: {tokens_to_sell} —Ç–æ–∫–µ–Ω–æ–≤")
            else:
                tokens_to_sell = current_balance
                logger.info(f"üìä –ü—Ä–æ–¥–∞–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å: {tokens_to_sell} —Ç–æ–∫–µ–Ω–æ–≤")
            
            if tokens_to_sell <= 0:
                error_msg = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–≤–Ω–æ 0"
                logger.warning(error_msg)
                return SellResult(success=False, error_message=error_msg)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
            mint_pubkey = token_info.mint
            wallet_pubkey = self.wallet.get_public_key()
            bonding_curve = token_info.bonding_curve
            associated_bonding_curve = token_info.associated_bonding_curve
            
            # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ATA –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
            associated_user = await self.address_provider.get_associated_token_address(
                wallet_pubkey, mint_pubkey
            )
            
            logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
            logger.info(f"   Bonding Curve: {bonding_curve}")
            logger.info(f"   Associated BC: {associated_bonding_curve}")
            
            # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ SOL
            estimated_sol = await self._estimate_sol_output(tokens_to_sell)
            min_sol_output, _ = self.instruction_builder.calculate_slippage_amounts(
                estimated_sol, slippage_percent
            )
            
            logger.info(f"üíé –û–∂–∏–¥–∞–µ–º—ã–π SOL: {estimated_sol / 1_000_000_000:.6f}, –º–∏–Ω–∏–º—É–º: {min_sol_output / 1_000_000_000:.6f}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏
            logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ sell –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
            sell_instruction = self.instruction_builder.build_sell_instruction(
                seller_wallet=wallet_pubkey,
                mint_address=mint_pubkey,
                bonding_curve=bonding_curve,
                associated_bonding_curve=associated_bonding_curve,
                associated_user=associated_user,
                token_amount=tokens_to_sell,
                min_sol_output=min_sol_output
            )
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(max_retries):
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ #{attempt + 1}/{max_retries}")
                    
                    result = await self._execute_sell_transaction(
                        sell_instruction, tokens_to_sell, min_sol_output
                    )
                    
                    if result.success:
                        logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–∞! Signature: {result.transaction_signature}")
                        return result
                    else:
                        logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ #{attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {result.error_message}")
                        
                        if attempt < max_retries - 1:
                            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ #{attempt + 1}: {str(e)}")
                    if attempt == max_retries - 1:
                        raise
                    await asyncio.sleep(1)
            
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
            logger.error(error_msg)
            return SellResult(success=False, error_message=error_msg)
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ: {str(e)}"
            logger.error(error_msg)
            return SellResult(success=False, error_message=error_msg)
    
    async def _execute_sell_transaction(
        self, 
        sell_instruction, 
        token_amount: int, 
        min_sol_output: int
    ) -> SellResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏.
        
        Args:
            sell_instruction: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏
            token_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            min_sol_output: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL
            
        Returns:
            SellResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ blockhash
            logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ blockhash")
            blockhash_response = await self.client.get_latest_blockhash()
            if not blockhash_response.get('success'):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å blockhash")
            
            blockhash = blockhash_response['blockhash']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            instructions = []
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ priority fee –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä
            if self.priority_fee_manager:
                try:
                    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ priority fee")
                    priority_fee_ix = await self.priority_fee_manager.create_priority_fee_instruction()
                    if priority_fee_ix:
                        instructions.append(priority_fee_ix)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å priority fee: {e}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            instructions.append(sell_instruction)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            message = Message.new_with_blockhash(
                instructions=instructions,
                payer=self.wallet.get_public_key(),
                blockhash=blockhash
            )
            
            transaction = Transaction.new_unsigned(message)
            signed_transaction = self.wallet.sign_transaction(transaction)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            send_response = await self.client.send_transaction(signed_transaction)
            
            if not send_response.get('success'):
                error_msg = send_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ')
                return SellResult(success=False, error_message=error_msg)
            
            signature = send_response['signature']
            logger.info(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {signature}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            logger.debug("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            confirm_response = await self.client.confirm_transaction(signature)
            
            if confirm_response.get('success'):
                logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {signature}")
                
                return SellResult(
                    success=True,
                    transaction_signature=signature,
                    tokens_sold=token_amount,
                    sol_received=min_sol_output  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                )
            else:
                error_msg = confirm_response.get('error', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
                return SellResult(success=False, error_message=error_msg)
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}"
            logger.error(error_msg)
            return SellResult(success=False, error_message=error_msg)
    
    async def _get_token_balance(self, mint_pubkey: Pubkey, wallet_pubkey: Pubkey) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ.
        
        Args:
            mint_pubkey: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á mint —Ç–æ–∫–µ–Ω–∞
            wallet_pubkey: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
            
        Returns:
            –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ATA –∞–¥—Ä–µ—Å–∞
            ata_address = await self.address_provider.get_associated_token_address(
                wallet_pubkey, mint_pubkey
            )
            
            # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
            balance_response = await self.client.get_token_account_balance(str(ata_address))
            
            if balance_response.get('success'):
                balance = balance_response.get('balance', 0)
                logger.debug(f"–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {balance}")
                return balance
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0")
                return 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            return 0
    
    async def _estimate_sol_output(self, token_amount: int) -> int:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω—ã.
        
        Args:
            token_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            
        Returns:
            –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –≤ lamports
        """
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CurveManager –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É
            estimated_sol = token_amount // 1000000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
            logger.debug(f"–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ SOL: {estimated_sol} lamports")
            return max(estimated_sol, 1000)  # –ú–∏–Ω–∏–º—É–º 1000 lamports
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL: {e}")
            return 1000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    
    async def get_sell_quote(self, token_info, token_amount: Optional[int] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        
        Args:
            token_info: TokenInfo –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
            token_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Å—å –±–∞–ª–∞–Ω—Å)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ
        """
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {token_info.symbol} ({token_info.mint})")
        
        try:
            mint_pubkey = token_info.mint
            wallet_pubkey = self.wallet.get_public_key()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            current_balance = await self._get_token_balance(mint_pubkey, wallet_pubkey)
            
            if token_amount is None:
                tokens_to_sell = current_balance
            else:
                tokens_to_sell = min(token_amount, current_balance)
            
            # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ SOL
            estimated_sol = await self._estimate_sol_output(tokens_to_sell)
            
            quote = {
                'mint_address': token_info.mint,
                'current_balance': current_balance,
                'tokens_to_sell': tokens_to_sell,
                'estimated_sol': estimated_sol,
                'estimated_sol_formatted': estimated_sol / 1_000_000_000,
                'price_per_token': estimated_sol / tokens_to_sell if tokens_to_sell > 0 else 0,
                'timestamp': asyncio.get_event_loop().time()
            }
            
            logger.debug(f"–ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {quote}")
            return quote
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return {'error': str(e)}
    
    async def sell_all_tokens(self, token_info, slippage_percent: float = 5.0) -> SellResult:
        """
        –ü—Ä–æ–¥–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–∞–Ω–Ω–æ–≥–æ mint'–∞.
        
        Args:
            token_info: TokenInfo –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
            slippage_percent: –ü—Ä–æ—Ü–µ–Ω—Ç slippage (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%)
            
        Returns:
            SellResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üî• –ü—Ä–æ–¥–∞–∂–∞ –í–°–ï–• —Ç–æ–∫–µ–Ω–æ–≤ {token_info.symbol} ({token_info.mint})")
        return await self.sell_token(token_info, percentage=100.0, slippage_percent=slippage_percent)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def example_usage():
        """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SimpleSeller"""
        print("üí∞ –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø SIMPLE SELLER")
        print("=" * 50)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        print("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   - SimpleClient")
        print("   - SimpleWallet") 
        print("   - AddressProvider")
        print("   - InstructionBuilder")
        
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
        # seller = SimpleSeller(client, wallet, address_provider, instruction_builder)
        
        # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        # quote = await seller.get_sell_quote("So11111111111111111111111111111111111111112")
        # print(f"üìä –ö–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {quote}")
        
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏ 50% —Ç–æ–∫–µ–Ω–æ–≤
        # result = await seller.sell_token("So11111111111111111111111111111111111111112", percentage=50.0)
        # print(f"üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–∞–∂–∏: {result}")
        
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
        # result = await seller.sell_all_tokens("So11111111111111111111111111111111111111112")
        # print(f"üî• –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤: {result}")
        
        print("\nüéØ SimpleSeller –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(example_usage())
