"""
–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä Take Profit / Stop Loss –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.
"""

import logging
import asyncio
from typing import Optional, Dict, Any, Callable
from dataclasses import dataclass
from enum import Enum
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ExitReason(Enum):
    """–ü—Ä–∏—á–∏–Ω—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
    TAKE_PROFIT = "take_profit"
    STOP_LOSS = "stop_loss"
    TIME_LIMIT = "time_limit"
    MANUAL = "manual"

@dataclass
class MonitoringConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    take_profit_percent: float = 50.0  # % –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è TP
    stop_loss_percent: float = 20.0    # % —É–±—ã—Ç–∫–∞ –¥–ª—è SL
    time_limit_seconds: int = 60       # –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    check_interval_seconds: float = 1.0  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
    
@dataclass
class MonitoringResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    should_sell: bool
    exit_reason: Optional[ExitReason] = None
    current_price: Optional[float] = None
    profit_loss_percent: Optional[float] = None
    time_elapsed: Optional[float] = None


class SimpleTpSlManager:
    """
    –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä TP/SL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π.
    """
    
    def __init__(self, curve_manager, client=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            curve_manager: CurveManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω
            client: SimpleClient –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.curve_manager = curve_manager
        self.client = client
        self.is_monitoring = False
        self.monitoring_task = None
        
        logger.info("SimpleTpSlManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_monitoring(
        self,
        mint_address: str,
        buy_price: float,
        config: MonitoringConfig,
        callback: Optional[Callable] = None
    ) -> MonitoringResult:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ —Å TP/SL.
        
        Args:
            mint_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            buy_price: –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ P&L
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            MonitoringResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏: {mint_address}")
        logger.info(f"üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {buy_price}")
        logger.info(f"üìä TP: {config.take_profit_percent}%, SL: {config.stop_loss_percent}%")
        logger.info(f"‚è∞ –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {config.time_limit_seconds}s")
        
        self.is_monitoring = True
        start_time = time.time()
        
        try:
            while self.is_monitoring:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                elapsed_time = time.time() - start_time
                if elapsed_time >= config.time_limit_seconds:
                    logger.info(f"‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.1f}s")
                    if callback:
                        await callback(ExitReason.TIME_LIMIT, elapsed_time)
                    return MonitoringResult(
                        should_sell=True,
                        exit_reason=ExitReason.TIME_LIMIT,
                        time_elapsed=elapsed_time
                    )
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                try:
                    current_price = await self._get_current_price(mint_address)
                    if current_price is None:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                        await asyncio.sleep(config.check_interval_seconds)
                        continue
                    
                    # –†–∞—Å—á–µ—Ç P&L
                    profit_loss_percent = ((current_price - buy_price) / buy_price) * 100
                    
                    logger.debug(f"üíπ –¶–µ–Ω–∞: {current_price:.8f}, P&L: {profit_loss_percent:.2f}%")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞
                    exit_reason = None
                    
                    if profit_loss_percent >= config.take_profit_percent:
                        exit_reason = ExitReason.TAKE_PROFIT
                        logger.info(f"üéØ Take Profit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! P&L: {profit_loss_percent:.2f}%")
                    elif profit_loss_percent <= -config.stop_loss_percent:
                        exit_reason = ExitReason.STOP_LOSS
                        logger.info(f"üõë Stop Loss –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! P&L: {profit_loss_percent:.2f}%")
                    
                    if exit_reason:
                        if callback:
                            await callback(exit_reason, profit_loss_percent)
                        
                        return MonitoringResult(
                            should_sell=True,
                            exit_reason=exit_reason,
                            current_price=current_price,
                            profit_loss_percent=profit_loss_percent,
                            time_elapsed=elapsed_time
                        )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã: {e}")
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(config.check_interval_seconds)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é
            logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            return MonitoringResult(
                should_sell=False,
                exit_reason=ExitReason.MANUAL,
                time_elapsed=time.time() - start_time
            )
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            return MonitoringResult(
                should_sell=False,
                time_elapsed=time.time() - start_time
            )
        finally:
            self.is_monitoring = False
    
    async def _get_current_price(self, mint_address: str) -> Optional[float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞.
        
        Args:
            mint_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ü–µ–Ω—ã:
            # 1. –ß–µ—Ä–µ–∑ CurveManager (bonding curve)
            # 2. –ß–µ—Ä–µ–∑ DEX API
            # 3. –ß–µ—Ä–µ–∑ on-chain –¥–∞–Ω–Ω—ã–µ
            
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            if hasattr(self.curve_manager, 'get_current_price'):
                price = await self.curve_manager.get_current_price(mint_address)
                return price
            else:
                # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                import random
                base_price = 0.000001
                variation = random.uniform(-0.1, 0.1)  # ¬±10% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                simulated_price = base_price * (1 + variation)
                logger.debug(f"–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {simulated_price:.8f}")
                return simulated_price
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return None
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏."""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        self.is_monitoring = False
        
        if self.monitoring_task and not self.monitoring_task.done():
            self.monitoring_task.cancel()
    
    async def monitor_position_async(
        self,
        mint_address: str,
        buy_price: float,
        config: MonitoringConfig,
        callback: Optional[Callable] = None
    ):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ.
        
        Args:
            mint_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            buy_price: –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            callback: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        """
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {mint_address}")
        
        self.monitoring_task = asyncio.create_task(
            self.start_monitoring(mint_address, buy_price, config, callback)
        )
        
        return self.monitoring_task
    
    async def get_position_status(self, mint_address: str, buy_price: float) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        
        Args:
            mint_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            buy_price: –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            current_price = await self._get_current_price(mint_address)
            
            if current_price is None:
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É'}
            
            profit_loss_percent = ((current_price - buy_price) / buy_price) * 100
            profit_loss_absolute = current_price - buy_price
            
            status = {
                'mint_address': mint_address,
                'buy_price': buy_price,
                'current_price': current_price,
                'profit_loss_percent': profit_loss_percent,
                'profit_loss_absolute': profit_loss_absolute,
                'is_profitable': profit_loss_percent > 0,
                'timestamp': time.time()
            }
            
            logger.debug(f"–°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏: {status}")
            return status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {'error': str(e)}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def example_callback(exit_reason: ExitReason, value: float):
        """–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞"""
        print(f"üîî –°–∏–≥–Ω–∞–ª: {exit_reason.value}, –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
    
    async def example_usage():
        """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SimpleTpSlManager"""
        print("üîç –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø SIMPLE TP/SL MANAGER")
        print("=" * 50)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç CurveManager)
        # curve_manager = CurveManager(...)
        # manager = SimpleTpSlManager(curve_manager)
        
        print("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CurveManager")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        class MockCurveManager:
            pass
        
        manager = SimpleTpSlManager(MockCurveManager())
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        config = MonitoringConfig(
            take_profit_percent=20.0,  # 20% –ø—Ä–∏–±—ã–ª—å
            stop_loss_percent=10.0,    # 10% —É–±—ã—Ç–æ–∫
            time_limit_seconds=30,     # 30 —Å–µ–∫—É–Ω–¥
            check_interval_seconds=2.0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        )
        
        print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: TP={config.take_profit_percent}%, SL={config.stop_loss_percent}%")
        print(f"‚è∞ –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: {config.time_limit_seconds}s")
        
        # –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        mint_address = "So11111111111111111111111111111111111111112"
        buy_price = 0.000001
        
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {mint_address}")
        print(f"üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {buy_price}")
        
        result = await manager.start_monitoring(
            mint_address=mint_address,
            buy_price=buy_price,
            config=config,
            callback=example_callback
        )
        
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        print(f"   –ü—Ä–æ–¥–∞–≤–∞—Ç—å: {result.should_sell}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {result.exit_reason}")
        print(f"   –í—Ä–µ–º—è: {result.time_elapsed:.1f}s")
        if result.profit_loss_percent:
            print(f"   P&L: {result.profit_loss_percent:.2f}%")
        
        print("\nüéØ SimpleTpSlManager –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(example_usage())
