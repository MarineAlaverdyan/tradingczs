"""
–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è pump.fun.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ bonding curve —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import logging
import asyncio
from typing import Optional, Dict, Any
from dataclasses import dataclass
from solders.pubkey import Pubkey
from solders.transaction import Transaction
from solders.message import Message
from solders.hash import Hash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class BuyResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏"""
    success: bool
    transaction_signature: Optional[str] = None
    tokens_received: Optional[int] = None
    sol_spent: Optional[int] = None
    error_message: Optional[str] = None
    gas_used: Optional[int] = None


class SimpleBuyer:
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ pump.fun bonding curve.
    """
    
    def __init__(self, client, wallet, address_provider, instruction_builder, priority_fee_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
        
        Args:
            client: SimpleClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Solana
            wallet: SimpleWallet –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            address_provider: AddressProvider –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
            instruction_builder: InstructionBuilder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            priority_fee_manager: PriorityFeeManager –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.client = client
        self.wallet = wallet
        self.address_provider = address_provider
        self.instruction_builder = instruction_builder
        self.priority_fee_manager = priority_fee_manager
        
        logger.info("SimpleBuyer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def buy_token(
        self,
        token_info,
        sol_amount: float,
        slippage_percent: float = 5.0,
        max_retries: int = 3
    ) -> BuyResult:
        """
        –ü–æ–∫—É–ø–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ pump.fun bonding curve.
        
        Args:
            token_info: TokenInfo –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
            sol_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            slippage_percent: –ü—Ä–æ—Ü–µ–Ω—Ç slippage (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%)
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            BuyResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üõí –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–∞ {token_info.symbol} ({token_info.mint})")
        logger.info(f"üí∞ –°—É–º–º–∞: {sol_amount} SOL, Slippage: {slippage_percent}%")
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ lamports
            sol_lamports = int(sol_amount * 1_000_000_000)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è (–ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º!)
            mint_pubkey = token_info.mint
            wallet_pubkey = self.wallet.get_public_key()
            bonding_curve = token_info.bonding_curve
            associated_bonding_curve = token_info.associated_bonding_curve
            
            # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π ATA –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å
            associated_user = self.address_provider.get_associated_token_address(
                wallet_pubkey, mint_pubkey
            )
            
            logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è:")
            logger.info(f"   Mint: {mint_pubkey}")
            logger.info(f"   Bonding Curve: {bonding_curve}")
            logger.info(f"   Associated BC: {associated_bonding_curve}")
            logger.info(f"   User ATA: {associated_user}")
            
            logger.debug(f"Bonding curve: {bonding_curve}")
            logger.debug(f"User ATA: {associated_user}")
            
            # –†–∞—Å—á–µ—Ç slippage
            min_amount, max_amount = self.instruction_builder.calculate_slippage_amounts(
                sol_lamports, slippage_percent
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ATA –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ATA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            ata_exists = await self._check_ata_exists(associated_user)
            
            instructions = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è ATA –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not ata_exists:
                logger.info("üîß ATA –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è")
                create_ata_instruction = self.instruction_builder.build_create_ata_instruction(
                    payer=wallet_pubkey,
                    owner=wallet_pubkey,
                    mint=mint_pubkey,
                    ata_address=associated_user
                )
                instructions.append(create_ata_instruction)
            else:
                logger.info("‚úÖ ATA —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
            logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ buy –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
            buy_instruction = self.instruction_builder.build_buy_instruction(
                buyer_wallet=wallet_pubkey,
                mint_address=mint_pubkey,
                bonding_curve=bonding_curve,
                associated_bonding_curve=associated_bonding_curve,
                associated_user=associated_user,
                sol_amount=sol_lamports,
                max_sol_cost=max_amount
            )
            instructions.append(buy_instruction)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(max_retries):
                try:
                    logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ #{attempt + 1}/{max_retries}")
                    
                    result = await self._execute_buy_transaction(
                        instructions, sol_lamports, max_amount
                    )
                    
                    if result.success:
                        logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! Signature: {result.transaction_signature}")
                        return result
                    else:
                        logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ #{attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {result.error_message}")
                        
                        if attempt < max_retries - 1:
                            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ #{attempt + 1}: {str(e)}")
                    if attempt == max_retries - 1:
                        raise
                    await asyncio.sleep(1)
            
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
            logger.error(error_msg)
            return BuyResult(success=False, error_message=error_msg)
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {str(e)}"
            logger.error(error_msg)
            return BuyResult(success=False, error_message=error_msg)
    
    async def _execute_buy_transaction(
        self, 
        instructions_list, 
        sol_amount: int, 
        max_sol_cost: int
    ) -> BuyResult:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏.
        
        Args:
            instructions_list: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (–≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ ATA –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            sol_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –≤ lamports
            max_sol_cost: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å slippage
            
        Returns:
            BuyResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ blockhash
            logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ blockhash")
            blockhash = await self.client.get_latest_blockhash()
            if not blockhash:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å blockhash")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            instructions = []
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ priority fee –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä
            if self.priority_fee_manager:
                try:
                    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ priority fee")
                    priority_fee_ix = await self.priority_fee_manager.create_priority_fee_instruction()
                    if priority_fee_ix:
                        instructions.append(priority_fee_ix)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å priority fee: {e}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ (ATA + buy)
            instructions.extend(instructions_list)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            hash_obj = Hash.from_string(blockhash)
            message = Message.new_with_blockhash(
                instructions=instructions,
                payer=self.wallet.get_public_key(),
                blockhash=hash_obj
            )
            
            transaction = Transaction.new_unsigned(message)
            signed_transaction = self.wallet.sign_transaction(transaction, hash_obj)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            send_response = await self.client.send_transaction(signed_transaction)
            logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_response}")
            
            if not send_response.get('success'):
                error_msg = send_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
                return BuyResult(success=False, error_message=error_msg)
            
            signature = send_response['signature']
            logger.info(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {signature}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            confirm_response = await self.client.confirm_transaction(signature)
            logger.info(f"‚è≥ –û—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_response}")
            
            if confirm_response.get('success'):
                logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {signature}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tokens_received = await self._estimate_tokens_received(sol_amount)
                
                return BuyResult(
                    success=True,
                    transaction_signature=signature,
                    tokens_received=tokens_received,
                    sol_spent=sol_amount
                )
            else:
                error_msg = confirm_response.get('error', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {error_msg}")
                return BuyResult(success=False, error_message=error_msg)
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}"
            logger.error(error_msg)
            return BuyResult(success=False, error_message=error_msg)
    
    async def _check_ata_exists(self, ata_address: Pubkey) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Associated Token Account.
        
        Args:
            ata_address: –ê–¥—Ä–µ—Å ATA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ ATA —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –∏–Ω–∞—á–µ
        """
        try:
            response = await self.client._make_rpc_call("getAccountInfo", [str(ata_address)])
            if response and response.get('value') is not None:
                logger.debug(f"ATA {ata_address} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            else:
                logger.debug(f"ATA {ata_address} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ATA {ata_address}: {e}")
            return False  # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    
    async def _estimate_tokens_received(self, sol_amount: int) -> Optional[int]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.
        
        Args:
            sol_amount: –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –≤ lamports
            
        Returns:
            –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ None
        """
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ CurveManager
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ—Ü–µ–Ω–∫—É
            estimated_tokens = sol_amount * 1000000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
            logger.debug(f"–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {estimated_tokens}")
            return estimated_tokens
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            return None
    
    async def get_buy_quote(self, mint_address: str, sol_amount: float) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        
        Args:
            mint_address: –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
            sol_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–µ
        """
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {mint_address}, —Å—É–º–º–∞: {sol_amount} SOL")
        
        try:
            sol_lamports = int(sol_amount * 1_000_000_000)
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CurveManager –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            estimated_tokens = sol_lamports * 1000000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            
            quote = {
                'mint_address': mint_address,
                'sol_amount': sol_amount,
                'sol_lamports': sol_lamports,
                'estimated_tokens': estimated_tokens,
                'price_per_token': sol_lamports / estimated_tokens if estimated_tokens > 0 else 0,
                'timestamp': asyncio.get_event_loop().time()
            }
            
            logger.debug(f"–ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}")
            return quote
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            return {'error': str(e)}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def example_usage():
        """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SimpleBuyer"""
        print("üõí –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø SIMPLE BUYER")
        print("=" * 50)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        # client = SimpleClient(...)
        # wallet = SimpleWallet(...)
        # address_provider = AddressProvider(...)
        # instruction_builder = InstructionBuilder(...)
        
        print("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   - SimpleClient")
        print("   - SimpleWallet") 
        print("   - AddressProvider")
        print("   - InstructionBuilder")
        
        # buyer = SimpleBuyer(client, wallet, address_provider, instruction_builder)
        
        # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏
        # quote = await buyer.get_buy_quote("So11111111111111111111111111111111111111112", 0.001)
        # print(f"üìä –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}")
        
        # –ü—Ä–∏–º–µ—Ä –ø–æ–∫—É–ø–∫–∏
        # result = await buyer.buy_token("So11111111111111111111111111111111111111112", 0.001, 5.0)
        # print(f"üõí –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏: {result}")
        
        print("\nüéØ SimpleBuyer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(example_usage())
