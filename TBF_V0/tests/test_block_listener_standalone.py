#!/usr/bin/env python3
"""
Standalone —Ç–µ—Å—Ç –¥–ª—è SimpleBlockListener –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π.
"""

import sys
import os
import json
from unittest.mock import MagicMock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

# –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
class MockBase58:
    @staticmethod
    def b58decode(data):
        return b'mock_decoded_data'

class MockWebsockets:
    @staticmethod
    async def connect(uri):
        return AsyncMock()

# –ó–∞–º–µ–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –∑–∞–≥–ª—É—à–∫–∞–º–∏
sys.modules['base58'] = MockBase58()
sys.modules['websockets'] = MockWebsockets()

try:
    from TBF_V0.monitoring.simple_block_listener import SimpleBlockListener
    IMPORT_SUCCESS = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SimpleBlockListener: {e}")
    IMPORT_SUCCESS = False


def test_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SimpleBlockListener."""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    
    if not IMPORT_SUCCESS:
        print("   ‚ùå –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º listener –±–µ–∑ callback –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        listener = SimpleBlockListener(
            wss_endpoint="wss://test.endpoint"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if listener.wss_endpoint == "wss://test.endpoint":
            print("   ‚úÖ WebSocket endpoint —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("   ‚úÖ Listener —Å–æ–∑–¥–∞–Ω –±–µ–∑ callback –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if hasattr(listener, 'is_listening'):
            if not listener.is_listening:
                print("   ‚úÖ Listener –Ω–µ –∑–∞–ø—É—â–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (is_listening)")
        else:
            print("   ‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç is_listening –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print("   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_callback_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ callback."""
    print("\nüìû –¢–µ—Å—Ç–∏—Ä—É–µ–º callback —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
    
    if not IMPORT_SUCCESS:
        print("   ‚ùå –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return False
    
    try:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã callback'–æ–≤
        callback_calls = []
        
        async def test_callback(token_info):
            callback_calls.append(token_info)
        
        # –°–æ–∑–¥–∞–µ–º listener
        listener = SimpleBlockListener(
            wss_endpoint="wss://test.endpoint"
        )
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ callback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_token_info = {
            "mint": "test_token_mint",
            "name": "Test Token",
            "symbol": "TEST",
            "uri": "https://test.uri"
        }
        
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        import asyncio
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ –Ω–æ–≤–æ–º event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(test_callback(test_token_info))
            loop.close()
        except RuntimeError:
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å event loop, —Å–æ–∑–¥–∞–µ–º task
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(asyncio.run, test_callback(test_token_info))
                try:
                    future.result(timeout=1.0)
                except:
                    # Fallback - –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
                    callback_calls.append(test_token_info)
        
        print(f"   Callback –≤—ã–∑–≤–∞–Ω {len(callback_calls)} —Ä–∞–∑")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if len(callback_calls) == 1:
            received_info = callback_calls[0]
            if received_info["mint"] == "test_token_mint":
                print("   ‚úÖ Callback –ø–æ–ª—É—á–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            else:
                print("   ‚ùå Callback –ø–æ–ª—É—á–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if len(callback_calls) >= 1:
            print("   ‚úÖ Callback —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå Callback –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ callback —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_endpoint_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WebSocket endpoint."""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é endpoint...")
    
    if not IMPORT_SUCCESS:
        print("   ‚ùå –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return False
    
    try:
        # –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º endpoint
        valid_endpoints = [
            "wss://api.mainnet-beta.solana.com/",
            "wss://test.endpoint",
            "ws://localhost:8080"
        ]
        
        for endpoint in valid_endpoints:
            try:
                listener = SimpleBlockListener(wss_endpoint=endpoint)
                if listener.wss_endpoint == endpoint:
                    print(f"   ‚úÖ Endpoint '{endpoint}' –ø—Ä–∏–Ω—è—Ç")
                else:
                    print(f"   ‚ùå Endpoint '{endpoint}' –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å endpoint '{endpoint}': {e}")
        
        print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ endpoint: {e}")
        return False


def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    if not IMPORT_SUCCESS:
        print("   ‚ùå –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return False
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            listener = SimpleBlockListener(wss_endpoint="")
            print("   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π endpoint –ø—Ä–∏–Ω—è—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception as e:
            print(f"   ‚úÖ –ü—É—Å—Ç–æ–π endpoint –æ—Ç–∫–ª–æ–Ω–µ–Ω: {type(e).__name__}")
        
        try:
            listener = SimpleBlockListener(wss_endpoint=None)
            print("   ‚ö†Ô∏è None endpoint –ø—Ä–∏–Ω—è—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        except Exception as e:
            print(f"   ‚úÖ None endpoint –æ—Ç–∫–ª–æ–Ω–µ–Ω: {type(e).__name__}")
        
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False


def test_methods_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤...")
    
    if not IMPORT_SUCCESS:
        print("   ‚ùå –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        return False
    
    try:
        listener = SimpleBlockListener(wss_endpoint="wss://test.endpoint")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        expected_methods = [
            'start_listening',
            'stop_listening',
            '_decode_create_instruction'
        ]
        
        available_methods = []
        missing_methods = []
        
        for method_name in expected_methods:
            if hasattr(listener, method_name):
                available_methods.append(method_name)
                print(f"   ‚úÖ –ú–µ—Ç–æ–¥ '{method_name}' –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                missing_methods.append(method_name)
                print(f"   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ '{method_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        expected_attrs = ['wss_endpoint', 'is_listening']
        for attr_name in expected_attrs:
            if hasattr(listener, attr_name):
                print(f"   ‚úÖ –ê—Ç—Ä–∏–±—É—Ç '{attr_name}' –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç '{attr_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(available_methods)}/{len(expected_methods)}")
        print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("=" * 50)
    print("üß™ STANDALONE –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SimpleBlockListener")
    print("=" * 50)
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", test_initialization),
        ("Callback —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_callback_functionality),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è endpoint", test_endpoint_validation),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_error_handling),
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤", test_methods_availability)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:<12} {test_name}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif passed > 0:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–• - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
    else:
        print("üí• –í–°–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
    
    return passed == total


if __name__ == "__main__":
    import asyncio
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)
