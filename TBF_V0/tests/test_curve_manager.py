"""
–¢–µ—Å—Ç –¥–ª—è CurveManager - –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –±–æ–Ω–¥–∏–Ω–≥–æ–≤–æ–π –∫—Ä–∏–≤–æ–π –±–µ–∑ —Ç—Ä–∞—Ç.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é CurveManager (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
import importlib.util
curve_manager_path = os.path.join(os.path.dirname(__file__), '..', 'pumpfun', 'curve_manager.py')
spec = importlib.util.spec_from_file_location("curve_manager", curve_manager_path)
curve_manager_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(curve_manager_module)
CurveManager = curve_manager_module.CurveManager


def test_price_calculations():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏."""
    print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏–≤–æ–π
        virtual_sol_reserves = 30_000_000_000  # 30 SOL –≤ lamports
        virtual_token_reserves = 1_073_000_000_000_000  # 1.073B —Ç–æ–∫–µ–Ω–æ–≤
        real_sol_reserves = 0
        real_token_reserves = 1_000_000_000_000_000  # 1B —Ç–æ–∫–µ–Ω–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º CurveManager
        curve = CurveManager(
            virtual_sol_reserves=virtual_sol_reserves,
            virtual_token_reserves=virtual_token_reserves,
            real_sol_reserves=real_sol_reserves,
            real_token_reserves=real_token_reserves
        )
        
        # –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ 1 SOL
        sol_amount = 1_000_000_000  # 1 SOL –≤ lamports
        tokens_out = curve.calculate_buy_price(sol_amount)
        
        print(f"   –ü–æ–∫—É–ø–∫–∞ –∑–∞ 1 SOL: {tokens_out:,} —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        sol_out = curve.calculate_sell_price(tokens_out)
        
        print(f"   –ü—Ä–æ–¥–∞–∂–∞ {tokens_out:,} —Ç–æ–∫–µ–Ω–æ–≤: {sol_out:,} lamports")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ SOL (–∏–∑-–∑–∞ —Å–ª–∏–ø–ø–µ–¥–∂–∞)
        if tokens_out > 0 and sol_out > 0 and sol_out < sol_amount:
            print("   ‚úÖ –†–∞—Å—á–µ—Ç—ã —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–µ—Å—Ç—å —Å–ª–∏–ø–ø–µ–¥–∂)")
            return True
        else:
            print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏: –ø–æ–∫—É–ø–∫–∞={tokens_out}, –ø—Ä–æ–¥–∞–∂–∞={sol_out}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω: {e}")
        return False


def test_current_price():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞."""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã...")
    
    try:
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=0,
            real_token_reserves=1_000_000_000_000_000
        )
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        current_price = curve.get_current_price()
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.12f} SOL –∑–∞ —Ç–æ–∫–µ–Ω")
        
        # –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –∏ —Ä–∞–∑—É–º–Ω–æ–π
        if 0 < current_price < 1:
            print("   ‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
            return True
        else:
            print(f"   ‚ùå –ù–µ—Ä–∞–∑—É–º–Ω–∞—è —Ü–µ–Ω–∞: {current_price}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
        return False


def test_market_cap():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("\nüè¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    try:
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=5_000_000_000,  # 5 SOL —É–∂–µ –≤ –ø—É–ª–µ
            real_token_reserves=950_000_000_000_000  # 950M —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
        )
        
        # –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        market_cap = curve.get_market_cap()
        print(f"   –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {market_cap:.6f} SOL")
        
        # Market cap –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
        if market_cap > 0:
            print("   ‚úÖ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {market_cap}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ market cap: {e}")
        return False


def test_migration_progress():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        # –¢–µ—Å—Ç –≤ –Ω–∞—á–∞–ª–µ (0% –ø—Ä–æ–≥—Ä–µ—Å—Å)
        curve_start = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=0,
            real_token_reserves=1_000_000_000_000_000
        )
        
        progress_start = curve_start.get_migration_progress()
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –Ω–∞—á–∞–ª–µ: {progress_start:.2%}")
        
        # –¢–µ—Å—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (~50% –ø—Ä–æ–≥—Ä–µ—Å—Å)
        curve_middle = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=40_000_000_000,  # 40 SOL
            real_token_reserves=500_000_000_000_000  # 500M —Ç–æ–∫–µ–Ω–æ–≤
        )
        
        progress_middle = curve_middle.get_migration_progress()
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ: {progress_middle:.2%}")
        
        # –¢–µ—Å—Ç –ø–æ—á—Ç–∏ –≤ –∫–æ–Ω—Ü–µ (~90% –ø—Ä–æ–≥—Ä–µ—Å—Å)
        curve_end = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=80_000_000_000,  # 80 SOL
            real_token_reserves=100_000_000_000_000  # 100M —Ç–æ–∫–µ–Ω–æ–≤
        )
        
        progress_end = curve_end.get_migration_progress()
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Ü–µ: {progress_end:.2%}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if 0 <= progress_start < progress_middle < progress_end <= 1:
            print("   ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress_start:.2%} -> {progress_middle:.2%} -> {progress_end:.2%}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return False


def test_slippage_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–∏–ø–ø–µ–¥–∂–∞."""
    print("\nüìâ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å–ª–∏–ø–ø–µ–¥–∂–∞...")
    
    try:
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=10_000_000_000,
            real_token_reserves=800_000_000_000_000
        )
        
        # –¢–µ—Å—Ç —Å–ª–∏–ø–ø–µ–¥–∂–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É–º–º
        amounts = [
            100_000_000,    # 0.1 SOL
            1_000_000_000,  # 1 SOL
            5_000_000_000,  # 5 SOL
            10_000_000_000  # 10 SOL
        ]
        
        slippages = []
        for amount in amounts:
            slippage = curve.calculate_slippage(amount)
            slippages.append(slippage)
            print(f"   –°–ª–∏–ø–ø–µ–¥–∂ –¥–ª—è {amount/1e9:.1f} SOL: {slippage:.4%}")
        
        # –°–ª–∏–ø–ø–µ–¥–∂ –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–º–µ—Ä–æ–º —Å–¥–µ–ª–∫–∏
        is_increasing = all(slippages[i] <= slippages[i+1] for i in range(len(slippages)-1))
        
        if is_increasing and all(0 <= s <= 1 for s in slippages):
            print("   ‚úÖ –°–ª–∏–ø–ø–µ–¥–∂ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å–ª–∏–ø–ø–µ–¥–∂–∞")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–∏–ø–ø–µ–¥–∂–∞: {e}")
        return False


def test_edge_cases():
    """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏...")
    
    try:
        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ —Ä–µ–∑–µ—Ä–≤–∞–º–∏
        try:
            curve_zero = CurveManager(0, 0, 0, 0)
            price_zero = curve_zero.get_current_price()
            print(f"   –¶–µ–Ω–∞ —Å –Ω—É–ª–µ–≤—ã–º–∏ —Ä–µ–∑–µ—Ä–≤–∞–º–∏: {price_zero}")
        except Exception as e:
            print(f"   ‚úÖ –ù—É–ª–µ–≤—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {type(e).__name__}")
        
        # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏
        curve_big = CurveManager(
            virtual_sol_reserves=10**18,
            virtual_token_reserves=10**18,
            real_sol_reserves=10**15,
            real_token_reserves=10**15
        )
        
        price_big = curve_big.get_current_price()
        print(f"   –¶–µ–Ω–∞ —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏: {price_big}")
        
        # –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ –Ω—É–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        tokens_zero = curve_big.calculate_buy_price(0)
        print(f"   –ü–æ–∫—É–ø–∫–∞ –∑–∞ 0 SOL: {tokens_zero} —Ç–æ–∫–µ–Ω–æ–≤")
        
        if tokens_zero == 0:
            print("   ‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {e}")
        return False


def test_curve_state_updates():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∏–≤–æ–π."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–∏–≤–æ–π...")
    
    try:
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=0,
            real_token_reserves=1_000_000_000_000_000
        )
        
        initial_price = curve.get_current_price()
        initial_progress = curve.get_migration_progress()
        
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {initial_price:.12f}")
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {initial_progress:.2%}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏)
        curve.update_reserves(
            real_sol_reserves=20_000_000_000,  # 20 SOL –¥–æ–±–∞–≤–ª–µ–Ω–æ
            real_token_reserves=600_000_000_000_000  # 600M —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
        )
        
        updated_price = curve.get_current_price()
        updated_progress = curve.get_migration_progress()
        
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {updated_price:.12f}")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {updated_progress:.2%}")
        
        # –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã—Ä–∞—Å—Ç–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è
        if updated_price > initial_price and updated_progress > initial_progress:
            print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return False


def test_realistic_scenario():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏."""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–≤—É—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=0,
            real_token_reserves=1_000_000_000_000_000
        )
        
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {curve.get_current_price():.12f} SOL")
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π market cap: {curve.get_market_cap():.6f} SOL")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–æ–∫
        purchases = [0.1, 0.5, 1.0, 2.0, 5.0]  # SOL
        total_sol_spent = 0
        total_tokens_bought = 0
        
        for sol_amount in purchases:
            sol_lamports = int(sol_amount * 1e9)
            tokens = curve.calculate_buy_price(sol_lamports)
            slippage = curve.calculate_slippage(sol_lamports)
            
            print(f"   –ü–æ–∫—É–ø–∫–∞ {sol_amount} SOL: {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤ (—Å–ª–∏–ø–ø–µ–¥–∂: {slippage:.2%})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–≤–æ–π
            total_sol_spent += sol_lamports
            total_tokens_bought += tokens
            new_real_sol = total_sol_spent
            new_real_tokens = 1_000_000_000_000_000 - total_tokens_bought
            
            curve.update_reserves(new_real_sol, new_real_tokens)
        
        final_price = curve.get_current_price()
        final_progress = curve.get_migration_progress()
        
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {final_price:.12f} SOL")
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {final_progress:.2%}")
        print(f"   –û–±—â–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã: {(final_price / curve.get_current_price() - 1) * 100:.1f}%")
        
        if final_price > 0 and final_progress > 0:
            print("   ‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return False


def run_all_curve_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã CurveManager."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CurveManager")
    print("=" * 50)
    
    tests = [
        ("–†–∞—Å—á–µ—Ç —Ü–µ–Ω", test_price_calculations),
        ("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", test_current_price),
        ("–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", test_market_cap),
        ("–ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏", test_migration_progress),
        ("–†–∞—Å—á–µ—Ç —Å–ª–∏–ø–ø–µ–¥–∂–∞", test_slippage_calculation),
        ("–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏", test_edge_cases),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è", test_curve_state_updates),
        ("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", test_realistic_scenario),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            if result:
                passed += 1
                print(f"   üéâ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"   üí• –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    else:
        print(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == total


if __name__ == "__main__":
    success = run_all_curve_tests()
    exit(0 if success else 1)
