"""
Standalone —Ç–µ—Å—Ç –¥–ª—è CurveManager - –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
–ö–æ–ø–∏—Ä—É–µ—Ç –∫–æ–¥ CurveManager –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

from typing import Tuple, Dict, Any
from dataclasses import dataclass


@dataclass
class CurveState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ bonding curve."""
    virtual_sol_reserves: float
    virtual_token_reserves: float
    real_sol_reserves: float
    real_token_reserves: float
    complete: bool = False


class CurveManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä bonding curve –¥–ª—è pump.fun.
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã, slippage –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–≤–æ–π.
    """
    
    def __init__(self, virtual_sol_reserves: float, virtual_token_reserves: float, 
                 real_sol_reserves: float, real_token_reserves: float):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π.
        
        Args:
            virtual_sol_reserves: –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ SOL —Ä–µ–∑–µ—Ä–≤—ã
            virtual_token_reserves: –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤—ã
            real_sol_reserves: –†–µ–∞–ª—å–Ω—ã–µ SOL —Ä–µ–∑–µ—Ä–≤—ã
            real_token_reserves: –†–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤—ã
        """
        self.state = CurveState(
            virtual_sol_reserves=virtual_sol_reserves,
            virtual_token_reserves=virtual_token_reserves,
            real_sol_reserves=real_sol_reserves,
            real_token_reserves=real_token_reserves
        )
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã pump.fun
        self.MIGRATION_TARGET = 85_000_000_000  # 85 SOL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
        self.TOTAL_SUPPLY = 1_000_000_000_000_000  # 1B —Ç–æ–∫–µ–Ω–æ–≤
    
    def calculate_buy_price(self, sol_amount: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ SOL.
        
        Args:
            sol_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–≤ lamports)
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        """
        if sol_amount <= 0:
            return 0
        
        # –§–æ—Ä–º—É–ª–∞ AMM: x * y = k
        # –ì–¥–µ x = SOL —Ä–µ–∑–µ—Ä–≤—ã, y = —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤—ã
        total_sol = self.state.virtual_sol_reserves + self.state.real_sol_reserves
        total_tokens = self.state.virtual_token_reserves + self.state.real_token_reserves
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        k = total_sol * total_tokens
        
        # –ù–æ–≤—ã–µ SOL —Ä–µ–∑–µ—Ä–≤—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        new_sol_reserves = total_sol + sol_amount
        
        # –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ —Ñ–æ—Ä–º—É–ª—ã k = x * y
        new_token_reserves = k / new_sol_reserves
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∫ –≤—ã–¥–∞—á–µ
        tokens_out = total_tokens - new_token_reserves
        
        return max(0, tokens_out)
    
    def calculate_sell_price(self, token_amount: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –∑–∞ —Ç–æ–∫–µ–Ω—ã.
        
        Args:
            token_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL (–≤ lamports)
        """
        if token_amount <= 0:
            return 0
        
        total_sol = self.state.virtual_sol_reserves + self.state.real_sol_reserves
        total_tokens = self.state.virtual_token_reserves + self.state.real_token_reserves
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤
        if token_amount > total_tokens:
            return 0
        
        k = total_sol * total_tokens
        
        # –ù–æ–≤—ã–µ —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤—ã –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
        new_token_reserves = total_tokens + token_amount
        
        # –ù–æ–≤—ã–µ SOL —Ä–µ–∑–µ—Ä–≤—ã
        new_sol_reserves = k / new_token_reserves
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –∫ –≤—ã–¥–∞—á–µ
        sol_out = total_sol - new_sol_reserves
        
        return max(0, sol_out)
    
    def get_current_price(self) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –≤ SOL.
        
        Returns:
            –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ SOL
        """
        total_sol = self.state.virtual_sol_reserves + self.state.real_sol_reserves
        total_tokens = self.state.virtual_token_reserves + self.state.real_token_reserves
        
        if total_tokens <= 0:
            return 0
        
        return total_sol / total_tokens
    
    def get_market_cap(self) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é.
        
        Returns:
            Market cap –≤ SOL
        """
        current_price = self.get_current_price()
        return current_price * self.TOTAL_SUPPLY
    
    def get_migration_progress(self) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ Raydium.
        
        Returns:
            –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 1
        """
        return min(1.0, self.state.real_sol_reserves / self.MIGRATION_TARGET)
    
    def calculate_slippage(self, sol_amount: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å slippage –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
        
        Args:
            sol_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            
        Returns:
            Slippage –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-1)
        """
        if sol_amount <= 0:
            return 0
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        current_price = self.get_current_price()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        tokens_received = self.calculate_buy_price(sol_amount)
        
        if tokens_received <= 0:
            return 1.0  # 100% slippage
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
        effective_price = sol_amount / tokens_received
        
        # Slippage = (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è_—Ü–µ–Ω–∞ - —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞) / —Ç–µ–∫—É—â–∞—è_—Ü–µ–Ω–∞
        if current_price <= 0:
            return 1.0
        
        slippage = (effective_price - current_price) / current_price
        return max(0, min(1, slippage))
    
    def update_reserves(self, real_sol_reserves: float, real_token_reserves: float):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–æ–≤.
        
        Args:
            real_sol_reserves: –ù–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ SOL —Ä–µ–∑–µ—Ä–≤—ã
            real_token_reserves: –ù–æ–≤—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω —Ä–µ–∑–µ—Ä–≤—ã
        """
        self.state.real_sol_reserves = real_sol_reserves
        self.state.real_token_reserves = real_token_reserves
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        if real_sol_reserves >= self.MIGRATION_TARGET:
            self.state.complete = True


def test_price_calculations():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏."""
    print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏–≤–æ–π
        virtual_sol_reserves = 30_000_000_000  # 30 SOL –≤ lamports
        virtual_token_reserves = 1_073_000_000_000_000  # 1.073B —Ç–æ–∫–µ–Ω–æ–≤
        real_sol_reserves = 0
        real_token_reserves = 1_000_000_000_000_000  # 1B —Ç–æ–∫–µ–Ω–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º CurveManager
        curve = CurveManager(
            virtual_sol_reserves=virtual_sol_reserves,
            virtual_token_reserves=virtual_token_reserves,
            real_sol_reserves=real_sol_reserves,
            real_token_reserves=real_token_reserves
        )
        
        # –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ 1 SOL
        sol_amount = 1_000_000_000  # 1 SOL –≤ lamports
        tokens_out = curve.calculate_buy_price(sol_amount)
        
        print(f"   –ü–æ–∫—É–ø–∫–∞ –∑–∞ 1 SOL: {tokens_out:,} —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        sol_out = curve.calculate_sell_price(tokens_out)
        
        print(f"   –ü—Ä–æ–¥–∞–∂–∞ {tokens_out:,} —Ç–æ–∫–µ–Ω–æ–≤: {sol_out:,} lamports")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ SOL (–∏–∑-–∑–∞ —Å–ª–∏–ø–ø–µ–¥–∂–∞)
        if tokens_out > 0 and sol_out > 0 and sol_out < sol_amount:
            print("   ‚úÖ –†–∞—Å—á–µ—Ç—ã —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–µ—Å—Ç—å —Å–ª–∏–ø–ø–µ–¥–∂)")
            return True
        else:
            print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏: –ø–æ–∫—É–ø–∫–∞={tokens_out}, –ø—Ä–æ–¥–∞–∂–∞={sol_out}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω: {e}")
        return False


def test_current_price():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞."""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã...")
    
    try:
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=0,
            real_token_reserves=1_000_000_000_000_000
        )
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        current_price = curve.get_current_price()
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.12f} SOL –∑–∞ —Ç–æ–∫–µ–Ω")
        
        # –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –∏ —Ä–∞–∑—É–º–Ω–æ–π
        if 0 < current_price < 1:
            print("   ‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö")
            return True
        else:
            print(f"   ‚ùå –ù–µ—Ä–∞–∑—É–º–Ω–∞—è —Ü–µ–Ω–∞: {current_price}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã: {e}")
        return False


def test_market_cap():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏."""
    print("\nüè¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    try:
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=5_000_000_000,  # 5 SOL —É–∂–µ –≤ –ø—É–ª–µ
            real_token_reserves=950_000_000_000_000  # 950M —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
        )
        
        # –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        market_cap = curve.get_market_cap()
        print(f"   –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {market_cap:.6f} SOL")
        
        # Market cap –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
        if market_cap > 0:
            print("   ‚úÖ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {market_cap}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ market cap: {e}")
        return False


def test_realistic_scenario():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏."""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–≤—É—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        curve = CurveManager(
            virtual_sol_reserves=30_000_000_000,
            virtual_token_reserves=1_073_000_000_000_000,
            real_sol_reserves=0,
            real_token_reserves=1_000_000_000_000_000
        )
        
        initial_price = curve.get_current_price()
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {initial_price:.12f} SOL")
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π market cap: {curve.get_market_cap():.6f} SOL")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∫—É–ø–æ–∫
        purchases = [0.1, 0.5, 1.0, 2.0, 5.0]  # SOL
        total_sol_spent = 0
        total_tokens_bought = 0
        
        for sol_amount in purchases:
            sol_lamports = int(sol_amount * 1e9)
            tokens = curve.calculate_buy_price(sol_lamports)
            slippage = curve.calculate_slippage(sol_lamports)
            
            print(f"   –ü–æ–∫—É–ø–∫–∞ {sol_amount} SOL: {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤ (—Å–ª–∏–ø–ø–µ–¥–∂: {slippage:.2%})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–≤–æ–π
            total_sol_spent += sol_lamports
            total_tokens_bought += tokens
            new_real_sol = total_sol_spent
            new_real_tokens = 1_000_000_000_000_000 - total_tokens_bought
            
            curve.update_reserves(new_real_sol, new_real_tokens)
        
        final_price = curve.get_current_price()
        final_progress = curve.get_migration_progress()
        
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {final_price:.12f} SOL")
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {final_progress:.2%}")
        print(f"   –û–±—â–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã: {(final_price / initial_price - 1) * 100:.1f}%")
        
        if final_price > initial_price and final_progress > 0:
            print("   ‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
        return False


def run_all_curve_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã CurveManager."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CurveManager")
    print("=" * 50)
    
    tests = [
        ("–†–∞—Å—á–µ—Ç —Ü–µ–Ω", test_price_calculations),
        ("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", test_current_price),
        ("–†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è", test_market_cap),
        ("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", test_realistic_scenario),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            if result:
                passed += 1
                print(f"   üéâ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"   üí• –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    else:
        print(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == total


if __name__ == "__main__":
    success = run_all_curve_tests()
    exit(0 if success else 1)
