#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π TBF_V0 –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

def test_module_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –ú–û–î–£–õ–ï–ô TBF_V0")
    print("=" * 50)
    
    modules = [
        ("SimpleClient", "TBF_V0.core.simple_client"),
        ("SimpleWallet", "TBF_V0.core.simple_wallet"),
        ("EventParser", "TBF_V0.pumpfun.event_parser"),
        ("CurveManager", "TBF_V0.pumpfun.curve_manager"),
        ("AddressProvider", "TBF_V0.pumpfun.address_provider"),
        ("SimpleBlockListener", "TBF_V0.monitoring.simple_block_listener")
    ]
    
    results = []
    
    for name, module_path in modules:
        try:
            __import__(module_path)
            print(f"‚úÖ {name:<18} - –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
            results.append((name, True, None))
        except Exception as e:
            print(f"‚ùå {name:<18} - –æ—à–∏–±–∫–∞: {str(e)[:50]}")
            results.append((name, False, str(e)))
    
    return results


def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π."""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    tests_passed = 0
    tests_total = 0
    
    # –¢–µ—Å—Ç SimpleBlockListener
    try:
        from TBF_V0.monitoring.simple_block_listener import SimpleBlockListener
        
        listener = SimpleBlockListener(wss_endpoint="wss://test.endpoint")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        assert listener.wss_endpoint == "wss://test.endpoint"
        assert hasattr(listener, 'is_listening')
        assert listener.is_listening == False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        assert hasattr(listener, 'start_listening')
        assert hasattr(listener, 'stop_listening')
        assert hasattr(listener, '_decode_create_instruction')
        
        print("‚úÖ SimpleBlockListener - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        tests_passed += 1
        
    except Exception as e:
        print(f"‚ùå SimpleBlockListener - –æ—à–∏–±–∫–∞: {e}")
    
    tests_total += 1
    
    # –¢–µ—Å—Ç CurveManager
    try:
        from TBF_V0.pumpfun.curve_manager import CurveManager, CurveState
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–∏–≤–æ–π
        curve_state = CurveState(
            virtual_token_reserves=1000000000000,  # 1M —Ç–æ–∫–µ–Ω–æ–≤
            virtual_sol_reserves=30000000000,      # 30 SOL
            real_token_reserves=800000000000,      # 800K —Ç–æ–∫–µ–Ω–æ–≤
            real_sol_reserves=0,
            complete=False
        )
        
        manager = CurveManager()
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
        sol_amount = 1.0  # 1 SOL
        tokens_out, price_per_token, new_state = manager.calculate_buy_price(sol_amount, curve_state)
        assert tokens_out > 0
        assert price_per_token > 0
        
        print("‚úÖ CurveManager - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        tests_passed += 1
        
    except Exception as e:
        print(f"‚ùå CurveManager - –æ—à–∏–±–∫–∞: {e}")
    
    tests_total += 1
    
    # –¢–µ—Å—Ç AddressProvider
    try:
        from TBF_V0.pumpfun.address_provider import AddressProvider
        
        provider = AddressProvider()
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
        from solders.pubkey import Pubkey
        mint_pubkey = Pubkey.from_string("So11111111111111111111111111111111111111112")
        bonding_curve, _ = provider.get_bonding_curve_address(mint_pubkey)
        metadata, _ = provider.get_metadata_address(mint_pubkey)
        
        assert bonding_curve is not None
        assert metadata is not None
        
        print("‚úÖ AddressProvider - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        tests_passed += 1
        
    except Exception as e:
        print(f"‚ùå AddressProvider - –æ—à–∏–±–∫–∞: {e}")
    
    tests_total += 1
    
    return tests_passed, tests_total


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TBF_V0")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    import_results = test_module_imports()
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    successful_imports = sum(1 for _, success, _ in import_results if success)
    total_modules = len(import_results)
    
    print(f"\n–ò–º–ø–æ—Ä—Ç—ã: {successful_imports}/{total_modules} –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if successful_imports > 0:
        tests_passed, tests_total = test_basic_functionality()
        print(f"\n–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tests_passed}/{tests_total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    else:
        tests_passed, tests_total = 0, 0
        print("\n–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 60)
    
    if successful_imports == total_modules and tests_passed == tests_total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ TBF_V0 —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    elif successful_imports > 0:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç—ã: {successful_imports}/{total_modules}")
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {tests_passed}/{tests_total}")
        return False
    else:
        print("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
