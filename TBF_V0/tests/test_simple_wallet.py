"""
–¢–µ—Å—Ç –¥–ª—è SimpleWallet - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–æ–º –±–µ–∑ —Ç—Ä–∞—Ç.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∑–∞–≥—Ä—É–∑–∫—É –∏ –ø–æ–¥–ø–∏—Å—å.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.simple_wallet import SimpleWallet


def test_wallet_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞."""
    print("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞...")
    
    try:
        wallet = SimpleWallet()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
        private_key = wallet.generate_new()
        
        print(f"   ‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {private_key[:20]}...")
        print(f"   ‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {wallet.is_loaded()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
        address = wallet.get_address_string()
        print(f"   ‚úÖ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å base58)
        if len(private_key) > 40:
            print("   ‚úÖ –î–ª–∏–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_wallet_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –∫–ª—é—á–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫
        wallet1 = SimpleWallet()
        private_key = wallet1.generate_new()
        address1 = wallet1.get_address_string()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–æ—à–µ–ª–µ–∫ –∏–∑ —Ç–æ–≥–æ –∂–µ –∫–ª—é—á–∞
        wallet2 = SimpleWallet()
        wallet2.load_from_private_key(private_key)
        address2 = wallet2.get_address_string()
        
        print(f"   –ê–¥—Ä–µ—Å 1: {address1}")
        print(f"   –ê–¥—Ä–µ—Å 2: {address2}")
        
        if address1 == address2:
            print("   ‚úÖ –ê–¥—Ä–µ—Å–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            return True
        else:
            print("   ‚ùå –ê–¥—Ä–µ—Å–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return False


def test_wallet_signing():
    """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("\n‚úçÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        wallet = SimpleWallet()
        wallet.generate_new()
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = b"Hello, Solana!"
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
        signature = wallet.sign_message(test_message)
        
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
        print(f"   ‚úÖ –ü–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {bytes(signature).hex()[:40]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø–æ–¥–ø–∏—Å–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 64 –±–∞–π—Ç–∞)
        if len(bytes(signature)) == 64:
            print("   ‚úÖ –î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (64 –±–∞–π—Ç–∞)")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏: {len(bytes(signature))}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False


def test_wallet_errors():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫."""
    print("\n‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...")
    
    try:
        # –ü—É—Å—Ç–æ–π –∫–æ—à–µ–ª–µ–∫
        empty_wallet = SimpleWallet()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            empty_wallet.get_public_key()
            print("   ‚ùå –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞")
            return False
        except Exception:
            print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ø—É—Å—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á
        try:
            empty_wallet.load_from_private_key("invalid_key_123")
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            return False
        except Exception:
            print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_wallet_keypair_access():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ keypair –æ–±—ä–µ–∫—Ç—É."""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ keypair...")
    
    try:
        wallet = SimpleWallet()
        wallet.generate_new()
        
        # –ü–æ–ª—É—á–∞–µ–º keypair
        keypair = wallet.get_keypair()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
        if hasattr(keypair, 'pubkey') and hasattr(keypair, 'sign_message'):
            print("   ‚úÖ Keypair –æ–±—ä–µ–∫—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π
            pubkey1 = wallet.get_public_key()
            pubkey2 = keypair.pubkey()
            
            if str(pubkey1) == str(pubkey2):
                print("   ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return True
            else:
                print("   ‚ùå –ü—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return False
        else:
            print("   ‚ùå Keypair –æ–±—ä–µ–∫—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ keypair: {e}")
        return False


def run_all_wallet_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∫–æ—à–µ–ª—å–∫–∞."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SimpleWallet")
    print("=" * 50)
    
    tests = [
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞", test_wallet_generation),
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞", test_wallet_loading),
        ("–ü–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π", test_wallet_signing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_wallet_errors),
        ("–î–æ—Å—Ç—É–ø –∫ keypair", test_wallet_keypair_access),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            if result:
                passed += 1
                print(f"   üéâ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"   üí• –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    else:
        print(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == total


if __name__ == "__main__":
    success = run_all_wallet_tests()
    exit(0 if success else 1)
