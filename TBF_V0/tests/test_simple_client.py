"""
–¢–µ—Å—Ç –¥–ª—è SimpleClient - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana RPC –±–µ–∑ —Ç—Ä–∞—Ç.
–í—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç devnet (–±–µ—Å–ø–ª–∞—Ç–Ω–æ).
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.simple_client import SimpleClient


async def test_devnet_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ devnet RPC."""
    print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet...")
    
    client = SimpleClient("https://api.devnet.solana.com")
    
    try:
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connected = await client.connect()
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if connected else '‚ùå –Ω–µ—É–¥–∞—á–Ω–æ'}")
        
        if not connected:
            return False
            
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    finally:
        await client.close()


async def test_rpc_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è RPC."""
    print("üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ RPC...")
    
    client = SimpleClient("https://api.devnet.solana.com")
    
    try:
        await client.connect()
        
        health = await client.get_health()
        print(f"   –ó–¥–æ—Ä–æ–≤—å–µ RPC: {health}")
        
        if health == "ok":
            print("   ‚úÖ RPC —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            return True
        else:
            print(f"   ‚ùå RPC –ø—Ä–æ–±–ª–µ–º—ã: {health}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False
    finally:
        await client.close()


async def test_get_slot():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—Ç–∞."""
    print("üé∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–∞...")
    
    client = SimpleClient("https://api.devnet.solana.com")
    
    try:
        await client.connect()
        
        slot = await client.get_slot()
        print(f"   –¢–µ–∫—É—â–∏–π —Å–ª–æ—Ç: {slot}")
        
        if isinstance(slot, int) and slot > 0:
            print("   ‚úÖ –°–ª–æ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ—Ç: {slot}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–∞: {e}")
        return False
    finally:
        await client.close()


async def test_get_blockhash():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è blockhash."""
    print("üß± –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ blockhash...")
    
    client = SimpleClient("https://api.devnet.solana.com")
    
    try:
        await client.connect()
        
        blockhash = await client.get_latest_blockhash()
        print(f"   Blockhash: {blockhash[:20]}...")
        
        if isinstance(blockhash, str) and len(blockhash) > 20:
            print("   ‚úÖ Blockhash –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π blockhash: {blockhash}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è blockhash: {e}")
        return False
    finally:
        await client.close()


async def test_get_balance():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."""
    print("üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
    
    client = SimpleClient("https://api.devnet.solana.com")
    
    try:
        await client.connect()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å System Program (–≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        system_program = "11111111111111111111111111111111"
        balance = await client.get_balance(system_program)
        print(f"   –ë–∞–ª–∞–Ω—Å System Program: {balance} SOL")
        
        if isinstance(balance, (int, float)) and balance >= 0:
            print("   ‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False
    finally:
        await client.close()


async def test_transaction_count():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    client = SimpleClient("https://api.devnet.solana.com")
    
    try:
        await client.connect()
        
        tx_count = await client.get_transaction_count()
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {tx_count}")
        
        if isinstance(tx_count, int) and tx_count > 0:
            print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {tx_count}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return False
    finally:
        await client.close()


async def test_invalid_endpoint():
    """–¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º."""
    print("üö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç...")
    
    client = SimpleClient("https://invalid-endpoint.com")
    
    try:
        connected = await client.connect()
        
        if not connected:
            print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç")
            return True
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            return False
            
    except Exception as e:
        print(f"   ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {e}")
        return True
    finally:
        await client.close()


async def run_all_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í SimpleClient")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet", test_devnet_connection),
        ("–ó–¥–æ—Ä–æ–≤—å–µ RPC", test_rpc_health),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ—Ç–∞", test_get_slot),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ blockhash", test_get_blockhash),
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", test_get_balance),
        ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", test_transaction_count),
        ("–ù–µ–≤–µ—Ä–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç", test_invalid_endpoint),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = await test_func()
            if result:
                passed += 1
        except Exception as e:
            print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    exit(0 if success else 1)
