"""
–¢–µ—Å—Ç –¥–ª—è EventParser - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π pump.fun –±–µ–∑ —Ç—Ä–∞—Ç.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import sys
import os
import base64
import struct

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from pumpfun.event_parser import EventParser, TokenInfo


def create_test_transaction_data():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    return {
        "transaction": {
            "message": {
                "accountKeys": [
                    "So11111111111111111111111111111111111111112",  # mint
                    "11111111111111111111111111111112",            # mint_authority
                    "bonding_curve_test_address_123456789012",     # bonding_curve
                    "associated_bonding_curve_test_address123",    # associated_bonding_curve
                    "4wTV1YmiEkRvAtNtsSGPtUrqRYQMe5db6hjPuMkCjDQF",  # global
                    "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",   # mpl_token_metadata
                    "metadata_test_address_123456789012345",       # metadata
                    "creator_test_address_1234567890123456",       # user/creator
                    "11111111111111111111111111111112",            # system_program
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",  # token_program
                    "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",  # associated_token_program
                    "SysvarRent111111111111111111111111111111111",   # rent
                    "Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1",  # event_authority
                    "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"   # pump_program
                ],
                "instructions": [
                    {
                        "programIdIndex": 13,  # pump.fun –ø—Ä–æ–≥—Ä–∞–º–º–∞
                        "accounts": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
                        "data": base64.b64encode(
                            EventParser.CREATE_DISCRIMINATOR + 
                            struct.pack("<I", 8) + b"TestCoin" +  # name
                            struct.pack("<I", 4) + b"TEST" +      # symbol
                            struct.pack("<I", 21) + b"https://test.com/meta"  # uri (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª–∏–Ω–∞)
                        ).decode()
                    }
                ]
            }
        }
    }


def create_invalid_transaction_data():
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    return {
        "transaction": {
            "message": {
                "accountKeys": [
                    "So11111111111111111111111111111111111111112",
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                ],
                "instructions": [
                    {
                        "programIdIndex": 1,  # –ù–ï pump.fun –ø—Ä–æ–≥—Ä–∞–º–º–∞
                        "accounts": [0, 1],
                        "data": base64.b64encode(b"invalid_data").decode()
                    }
                ]
            }
        }
    }


def test_transaction_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤."""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∏—è...")
    
    try:
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        valid_tx = create_test_transaction_data()
        is_create_valid = EventParser.is_create_transaction(valid_tx)
        
        print(f"   –í–∞–ª–∏–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ: {is_create_valid}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
        invalid_tx = create_invalid_transaction_data()
        is_create_invalid = EventParser.is_create_transaction(invalid_tx)
        
        print(f"   –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ: {is_create_invalid}")
        
        if is_create_valid and not is_create_invalid:
            print("   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return False


def test_event_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        test_tx = create_test_transaction_data()
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ
        token_info = EventParser.parse_create_event(test_tx)
        
        if token_info:
            print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {token_info.name}")
            print(f"   ‚úÖ –°–∏–º–≤–æ–ª: {token_info.symbol}")
            print(f"   ‚úÖ URI: {token_info.uri}")
            print(f"   ‚úÖ Mint: {token_info.mint}")
            print(f"   ‚úÖ –°–æ–∑–¥–∞—Ç–µ–ª—å: {token_info.creator}")
            print(f"   ‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {token_info.platform}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            expected_values = {
                "name": "TestCoin",
                "symbol": "TEST",
                "uri": "https://test.com/meta",
                "platform": "pump.fun"
            }
            
            for key, expected in expected_values.items():
                actual = getattr(token_info, key)
                if actual != expected:
                    print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {key}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected}', –ø–æ–ª—É—á–µ–Ω–æ '{actual}'")
                    return False
            
            print("   ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            return True
        else:
            print("   ‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False


def test_token_info_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ TokenInfo."""
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é TokenInfo...")
    
    try:
        # –í–∞–ª–∏–¥–Ω—ã–π TokenInfo
        valid_token = TokenInfo(
            mint="So11111111111111111111111111111111111111112",
            name="Test Token",
            symbol="TEST",
            uri="https://test.com",
            creator="11111111111111111111111111111112",
            bonding_curve="11111111111111111111111111111112",
            associated_bonding_curve="11111111111111111111111111111112"
        )
        
        is_valid = EventParser.validate_token_info(valid_token)
        print(f"   –í–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {is_valid}")
        
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π TokenInfo (–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
        invalid_token = TokenInfo(
            mint="So11111111111111111111111111111111111111112",
            name="",  # –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            symbol="TEST",
            uri="https://test.com",
            creator="11111111111111111111111111111112",
            bonding_curve="11111111111111111111111111111112",
            associated_bonding_curve="11111111111111111111111111111112"
        )
        
        is_invalid = EventParser.validate_token_info(invalid_token)
        print(f"   –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {is_invalid}")
        
        if is_valid and not is_invalid:
            print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è TokenInfo —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ TokenInfo")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


def test_invalid_addresses_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏."""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏...")
    
    try:
        # TokenInfo —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
        invalid_addresses_token = TokenInfo(
            mint="invalid_mint_address",
            name="Test Token",
            symbol="TEST",
            uri="https://test.com",
            creator="invalid_creator",
            bonding_curve="invalid_bonding_curve",
            associated_bonding_curve="invalid_abc"
        )
        
        is_valid = EventParser.validate_token_info(invalid_addresses_token)
        print(f"   –¢–æ–∫–µ–Ω —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {is_valid}")
        
        if not is_valid:
            print("   ‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
            return True
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {e}")
        return False


def test_long_strings_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏."""
    print("\nüìè –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏...")
    
    try:
        # TokenInfo —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        long_name_token = TokenInfo(
            mint="So11111111111111111111111111111111111111112",
            name="A" * 150,  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            symbol="TEST",
            uri="https://test.com",
            creator="11111111111111111111111111111112",
            bonding_curve="11111111111111111111111111111112",
            associated_bonding_curve="11111111111111111111111111111112"
        )
        
        is_valid_long_name = EventParser.validate_token_info(long_name_token)
        print(f"   –¢–æ–∫–µ–Ω —Å –¥–ª–∏–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {is_valid_long_name}")
        
        # TokenInfo —Å –¥–ª–∏–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º
        long_symbol_token = TokenInfo(
            mint="So11111111111111111111111111111111111111112",
            name="Test Token",
            symbol="VERYLONGSYMBOL123456789",  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª
            uri="https://test.com",
            creator="11111111111111111111111111111112",
            bonding_curve="11111111111111111111111111111112",
            associated_bonding_curve="11111111111111111111111111111112"
        )
        
        is_valid_long_symbol = EventParser.validate_token_info(long_symbol_token)
        print(f"   –¢–æ–∫–µ–Ω —Å –¥–ª–∏–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {is_valid_long_symbol}")
        
        if not is_valid_long_name and not is_valid_long_symbol:
            print("   ‚úÖ –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
            return True
        else:
            print("   ‚ùå –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {e}")
        return False


def test_parsing_errors():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    try:
        # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        empty_data = {}
        result_empty = EventParser.parse_create_event(empty_data)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {result_empty}")
        
        # –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        incomplete_data = {"transaction": {"message": {}}}
        result_incomplete = EventParser.parse_create_event(incomplete_data)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {result_incomplete}")
        
        # –î–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        no_instructions = {
            "transaction": {
                "message": {
                    "accountKeys": [],
                    "instructions": []
                }
            }
        }
        result_no_instructions = EventParser.parse_create_event(no_instructions)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {result_no_instructions}")
        
        # –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å None
        if result_empty is None and result_incomplete is None and result_no_instructions is None:
            print("   ‚úÖ –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_metadata_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º URI
        test_uri = "https://test.com/metadata.json"
        metadata = EventParser.extract_token_metadata(test_uri)
        
        print(f"   URI: {test_uri}")
        print(f"   ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {type(metadata)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å
        if isinstance(metadata, dict):
            print("   ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return True
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def run_all_parser_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã EventParser."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EventParser")
    print("=" * 50)
    
    tests = [
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", test_transaction_detection),
        ("–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è", test_event_parsing),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è TokenInfo", test_token_info_validation),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤", test_invalid_addresses_validation),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫", test_long_strings_validation),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", test_parsing_errors),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", test_metadata_extraction),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        try:
            result = test_func()
            if result:
                passed += 1
                print(f"   üéâ –ü–†–û–ô–î–ï–ù")
            else:
                print(f"   üí• –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    else:
        print(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return passed == total


if __name__ == "__main__":
    success = run_all_parser_tests()
    exit(0 if success else 1)
