#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.simple_client import SimpleClient
from core.simple_wallet import SimpleWallet
from pumpfun.address_provider import AddressProvider

async def check_token_balance():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    RPC_ENDPOINT = "https://mainnet.helius-rpc.com/?api-key=e6fa031e-699e-49ed-9672-4582bdb4950d"
    PRIVATE_KEY = "S8AmRgsyBPMqQL8BkY8PJoo7Gxj31HZZzpNWhfzUXwEkdQu56AJT9LSixAqGzAcR2b1W9XnuRPykZeZ9A6AXRRv"
    TOKEN_MINT = "r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump"
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –¢–û–ö–ï–ù–û–í")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–æ—à–µ–ª—å–∫–∞
        client = SimpleClient(RPC_ENDPOINT)
        await client.connect()
        
        wallet = SimpleWallet()
        wallet.load_from_private_key(PRIVATE_KEY)
        
        print(f"üëõ –ö–æ—à–µ–ª–µ–∫: {wallet.get_public_key()}")
        print(f"ü™ô –¢–æ–∫–µ–Ω: {TOKEN_MINT}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ SOL –±–∞–ª–∞–Ω—Å–∞
        sol_balance = await client.get_balance(str(wallet.get_public_key()))
        print(f"üí∞ SOL –±–∞–ª–∞–Ω—Å: {sol_balance} SOL")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞
        address_provider = AddressProvider()
        user_ata = address_provider.get_associated_token_address(
            str(wallet.get_public_key()),
            TOKEN_MINT
        )
        
        print(f"üìç User ATA: {user_ata}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ RPC
        try:
            token_balance_response = await client._make_rpc_call(
                "getTokenAccountBalance", 
                [str(user_ata)]
            )
            print(f"üéØ –û—Ç–≤–µ—Ç RPC: {token_balance_response}")
            
            if token_balance_response:
                token_amount = token_balance_response.get('value', {}).get('amount', '0')
                decimals = token_balance_response.get('value', {}).get('decimals', 6)
                ui_amount = int(token_amount) / (10 ** decimals)
                
                print(f"ü™ô –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: {ui_amount} ({token_amount} raw)")
                
                if ui_amount > 0:
                    print("‚úÖ –¢–û–ö–ï–ù–´ –ù–ê–ô–î–ï–ù–´! –ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π!")
                else:
                    print("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∫—É–ø–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        await client.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(check_token_balance())
