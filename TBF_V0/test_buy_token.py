"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–∫–∏ –º–µ–º–∫–æ–∏–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è.
–í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ TBF_V0 –≤ sys.path
sys.path.append(str(Path(__file__).parent))

from core.token_info import TokenInfo
from main_trader import MainTrader, TradeConfig


def setup_detailed_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ö–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)
    
    # File handler –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    file_handler = logging.FileHandler(
        log_dir / 'test_buy_detailed.log',
        encoding='utf-8',
        mode='w'  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    root_logger.addHandler(file_handler)
    
    # File handler –¥–ª—è –æ—à–∏–±–æ–∫
    error_handler = logging.FileHandler(
        log_dir / 'test_buy_errors.log',
        encoding='utf-8',
        mode='w'
    )
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(formatter)
    root_logger.addHandler(error_handler)
    
    print(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:")
    print(f"   –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏: {log_dir / 'test_buy_detailed.log'}")
    print(f"   –û—à–∏–±–∫–∏: {log_dir / 'test_buy_errors.log'}")
    print()


async def test_token_info_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ TokenInfo –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª—è."""
    
    logger = logging.getLogger("test_token_info")
    logger.info("üß™ –¢–ï–°–¢ 1: –°–æ–∑–¥–∞–Ω–∏–µ TokenInfo –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª—è")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è (—Ç–µ –∂–µ, —á—Ç–æ –≤—ã –ø–æ–∫–∞–∑–∞–ª–∏)
    listener_data = {
        'name': 'buy up',
        'symbol': 'buy up',
        'uri': 'https://ipfs.io/ipfs/Qmei5WUshDFeLJi5k8twgJZdKLC8g232r5RyjscjnTtjiT', 
        'mint': 'r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump', 
        'bondingCurve': 'AuUmsyXSAzKz4mTSEDX719rQvNpkz47rjbTn7QhU94SC',
        'associatedBondingCurve': 'CggVUQJEU2HWQRvMDAEiozNkPqKLMr5Mxc6zQPjnyrbz', 
        'user': '6pNDtUKGjbVVQLq8sQwdZW6heMuHAd6F5VpNSWfQvyfH'
    }
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ TokenInfo
        token_info = TokenInfo.from_listener_data(listener_data)
        
        logger.info("‚úÖ TokenInfo —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
        logger.info(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {token_info.name}")
        logger.info(f"   –°–∏–º–≤–æ–ª: {token_info.symbol}")
        logger.info(f"   Mint: {token_info.mint}")
        logger.info(f"   Bonding Curve: {token_info.bonding_curve}")
        logger.info(f"   Associated BC: {token_info.associated_bonding_curve}")
        logger.info(f"   –°–æ–∑–¥–∞—Ç–µ–ª—å: {token_info.user}")
        logger.info(f"   URI: {token_info.uri}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
        token_dict = token_info.to_dict()
        logger.debug(f"TokenInfo –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å: {token_dict}")
        
        return token_info
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TokenInfo: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return None


async def test_trader_initialization(token_info: TokenInfo):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞."""
    
    logger = logging.getLogger("test_trader_init")
    logger.info("üß™ –¢–ï–°–¢ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        config = TradeConfig(
            listener_data=token_info.to_dict(),
            sol_amount=0.00001,  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            private_key= "S8AmRgsyBPMqQL8BkY8PJoo7Gxj31HZZzpNWhfzUXwEkdQu56AJT9LSixAqGzAcR2b1W9XnuRPykZeZ9A6AXRRv",  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß!
            slippage_percent=10.0,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π slippage –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            monitoring_time_seconds=30,  # –ö–æ—Ä–æ—Ç–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            take_profit_percent=100.0,  # –í—ã—Å–æ–∫–∏–π TP –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            stop_loss_percent=50.0,   # –í—ã—Å–æ–∫–∏–π SL –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            rpc_endpoint="https://mainnet.helius-rpc.com/?api-key=e6fa031e-699e-49ed-9672-4582bdb4950d",  # DEVNET –¥–ª—è —Ç–µ—Å—Ç–æ–≤!
            log_level="DEBUG"
        )
        
        logger.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:")
        logger.info(f"   SOL —Å—É–º–º–∞: {config.sol_amount}")
        logger.info(f"   Slippage: {config.slippage_percent}%")
        logger.info(f"   RPC: {config.rpc_endpoint}")
        logger.info(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {config.monitoring_time_seconds}s")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        trader = MainTrader(config)
        logger.info("‚úÖ MainTrader —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        init_success = await trader.setup()
        
        if init_success:
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return trader
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return None


async def test_dry_run_analysis(trader: MainTrader, token_info: TokenInfo):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏."""
    
    logger = logging.getLogger("test_dry_run")
    logger.info("üß™ –¢–ï–°–¢ 3: –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏)")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RPC
        logger.info("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC...")
        health = await trader.client.get_health()
        logger.info(f"RPC —Å—Ç–∞—Ç—É—Å: {health}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        logger.info("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞...")
        wallet_address = trader.wallet.get_address_string()
        logger.info(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
        
        balance_sol = await trader.client.get_balance(wallet_address)
        logger.info(f"–ë–∞–ª–∞–Ω—Å: {balance_sol:.6f} SOL")
        
        if balance_sol < trader.config.sol_amount:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL! –ù—É–∂–Ω–æ: {trader.config.sol_amount}, –µ—Å—Ç—å: {balance_sol}")
        else:
            logger.info(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞...")
        logger.info(f"   –í—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è (–ù–ï –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è):")
        logger.info(f"   ‚úì Mint: {token_info.mint}")
        logger.info(f"   ‚úì Bonding Curve: {token_info.bonding_curve}")
        logger.info(f"   ‚úì Associated BC: {token_info.associated_bonding_curve}")
        logger.info(f"   ‚úì –°–æ–∑–¥–∞—Ç–µ–ª—å: {token_info.user}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –ø–æ–∫—É–ø–∫–∏)
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∫—É–ø–∫–∏...")
        try:
            quote = await trader.buyer.get_buy_quote(
                str(token_info.mint), 
                trader.config.sol_amount
            )
            logger.info(f"–ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É: {e}")
        
        logger.info("‚úÖ –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—É—Ö–æ–º –ø—Ä–æ–≥–æ–Ω–µ: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ö–£–ü–ö–ò –ú–ï–ú–ö–û–ò–ù–ê (TBF_V0)")
    print("=" * 60)
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!")
    print("üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DEVNET –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    print("üí° –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PRIVATE_KEY_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
    print()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_detailed_logging()
    
    logger = logging.getLogger("main")
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    
    try:
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ TokenInfo
        token_info = await test_token_info_creation()
        if not token_info:
            logger.error("‚ùå –¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å TokenInfo")
            return False
        
        print("‚úÖ –¢–µ—Å—Ç 1 –ø—Ä–æ–π–¥–µ–Ω: TokenInfo —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        trader = await test_trader_initialization(token_info)
        if not trader:
            logger.error("‚ùå –¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return False
        
        print("‚úÖ –¢–µ—Å—Ç 2 –ø—Ä–æ–π–¥–µ–Ω: –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 3: –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω
        dry_run_success = await test_dry_run_analysis(trader, token_info)
        if not dry_run_success:
            logger.error("‚ùå –¢–µ—Å—Ç 3 –ø—Ä–æ–≤–∞–ª–µ–Ω - –æ—à–∏–±–∫–∞ –≤ —Å—É—Ö–æ–º –ø—Ä–æ–≥–æ–Ω–µ")
            return False
        
        print("‚úÖ –¢–µ—Å—Ç 3 –ø—Ä–æ–π–¥–µ–Ω: –°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω —É—Å–ø–µ—à–µ–Ω")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await trader.client.close()
        
        print()
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π:")
        print("   - logs/test_buy_detailed.log")
        print("   - logs/test_buy_errors.log")
        print()
        print("üöÄ –ì–û–¢–û–í –ö –†–ï–ê–õ–¨–ù–û–ô –¢–û–†–ì–û–í–õ–ï!")
        print("   1. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_PRIVATE_KEY_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á")
        print("   2. –°–º–µ–Ω–∏—Ç–µ RPC –Ω–∞ mainnet –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏:")
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
