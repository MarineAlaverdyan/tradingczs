"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è token accounts.
–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ token accounts –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç SOL –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫.
"""

import logging
import asyncio
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from solders.pubkey import Pubkey
from solders.instruction import Instruction
from solders.transaction import Transaction
from solders.message import Message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class CleanupResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏"""
    success: bool
    closed_accounts: List[str] = None
    sol_recovered: int = 0
    error_message: Optional[str] = None
    transaction_signatures: List[str] = None

    def __post_init__(self):
        if self.closed_accounts is None:
            self.closed_accounts = []
        if self.transaction_signatures is None:
            self.transaction_signatures = []


class SimpleCleanup:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ token accounts.
    """
    
    def __init__(self, client, wallet, address_provider):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏.
        
        Args:
            client: SimpleClient –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Solana
            wallet: SimpleWallet –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            address_provider: AddressProvider –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤
        """
        self.client = client
        self.wallet = wallet
        self.address_provider = address_provider
        
        logger.info("SimpleCleanup –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def cleanup_after_sell(self, mint_address: str) -> CleanupResult:
        """
        –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞.
        
        Args:
            mint_address: –ê–¥—Ä–µ—Å mint –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            CleanupResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: {mint_address}")
        
        try:
            mint_pubkey = Pubkey.from_string(mint_address)
            wallet_pubkey = self.wallet.get_public_key()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ATA –∞–¥—Ä–µ—Å–∞
            ata_address = await self.address_provider.get_associated_token_address(
                wallet_pubkey, mint_pubkey
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ token account
            balance = await self._get_token_account_balance(str(ata_address))
            
            if balance > 0:
                logger.warning(f"‚ö†Ô∏è Token account –Ω–µ –ø—É—Å—Ç–æ–π, –±–∞–ª–∞–Ω—Å: {balance}")
                return CleanupResult(
                    success=False,
                    error_message=f"Token account —Å–æ–¥–µ—Ä–∂–∏—Ç {balance} —Ç–æ–∫–µ–Ω–æ–≤"
                )
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É—Å—Ç–æ–≥–æ token account
            result = await self._close_token_account(str(ata_address))
            
            if result.success:
                logger.info(f"‚úÖ Token account –∑–∞–∫—Ä—ã—Ç: {ata_address}")
                return CleanupResult(
                    success=True,
                    closed_accounts=[str(ata_address)],
                    sol_recovered=result.sol_recovered,
                    transaction_signatures=result.transaction_signatures
                )
            else:
                return result
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: {str(e)}"
            logger.error(error_msg)
            return CleanupResult(success=False, error_message=error_msg)
    
    async def cleanup_after_failure(self, mint_address: str) -> CleanupResult:
        """
        –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            mint_address: –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            CleanupResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–∏: {mint_address}")
        
        try:
            mint_pubkey = Pubkey.from_string(mint_address)
            wallet_pubkey = self.wallet.get_public_key()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ATA –∞–¥—Ä–µ—Å–∞
            ata_address = await self.address_provider.get_associated_token_address(
                wallet_pubkey, mint_pubkey
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è account
            exists = await self._token_account_exists(str(ata_address))
            
            if not exists:
                logger.info("‚ÑπÔ∏è Token account –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return CleanupResult(success=True)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance = await self._get_token_account_balance(str(ata_address))
            
            if balance > 0:
                logger.warning(f"‚ö†Ô∏è Token account —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω—ã: {balance}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
                return CleanupResult(
                    success=False,
                    error_message=f"Token account —Å–æ–¥–µ—Ä–∂–∏—Ç {balance} —Ç–æ–∫–µ–Ω–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–¥–∞–∂–∞"
                )
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É—Å—Ç–æ–≥–æ account
            result = await self._close_token_account(str(ata_address))
            return result
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–∏: {str(e)}"
            logger.error(error_msg)
            return CleanupResult(success=False, error_message=error_msg)
    
    async def cleanup_all_empty_accounts(self) -> CleanupResult:
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö token accounts –≤ –∫–æ—à–µ–ª—å–∫–µ.
        
        Returns:
            CleanupResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö token accounts")
        
        try:
            wallet_pubkey = self.wallet.get_public_key()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö token accounts
            token_accounts = await self._get_all_token_accounts(wallet_pubkey)
            
            if not token_accounts:
                logger.info("‚ÑπÔ∏è Token accounts –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return CleanupResult(success=True)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(token_accounts)} token accounts")
            
            closed_accounts = []
            total_sol_recovered = 0
            all_signatures = []
            
            for account_info in token_accounts:
                try:
                    account_address = account_info['address']
                    balance = account_info.get('balance', 0)
                    
                    if balance == 0:
                        logger.debug(f"–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π account: {account_address}")
                        
                        result = await self._close_token_account(account_address)
                        
                        if result.success:
                            closed_accounts.extend(result.closed_accounts)
                            total_sol_recovered += result.sol_recovered
                            all_signatures.extend(result.transaction_signatures)
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å {account_address}: {result.error_message}")
                    else:
                        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º account —Å –±–∞–ª–∞–Ω—Å–æ–º: {account_address} ({balance} —Ç–æ–∫–µ–Ω–æ–≤)")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ account {account_info}: {e}")
                    continue
            
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∑–∞–∫—Ä—ã—Ç–æ {len(closed_accounts)} accounts")
            logger.info(f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ SOL: {total_sol_recovered / 1_000_000_000:.6f}")
            
            return CleanupResult(
                success=True,
                closed_accounts=closed_accounts,
                sol_recovered=total_sol_recovered,
                transaction_signatures=all_signatures
            )
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏: {str(e)}"
            logger.error(error_msg)
            return CleanupResult(success=False, error_message=error_msg)
    
    async def _close_token_account(self, account_address: str) -> CleanupResult:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π token account.
        
        Args:
            account_address: –ê–¥—Ä–µ—Å token account –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            
        Returns:
            CleanupResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.debug(f"–ó–∞–∫—Ä—ã—Ç–∏–µ token account: {account_address}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_instruction = await self._create_close_account_instruction(account_address)
            
            if not close_instruction:
                return CleanupResult(
                    success=False,
                    error_message="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è"
                )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ blockhash
            blockhash_response = await self.client.get_latest_blockhash()
            if not blockhash_response.get('success'):
                return CleanupResult(
                    success=False,
                    error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å blockhash"
                )
            
            blockhash = blockhash_response['blockhash']
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            message = Message.new_with_blockhash(
                instructions=[close_instruction],
                payer=self.wallet.get_public_key(),
                blockhash=blockhash
            )
            
            transaction = Transaction.new_unsigned(message)
            signed_transaction = self.wallet.sign_transaction(transaction)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            send_response = await self.client.send_transaction(signed_transaction)
            
            if not send_response.get('success'):
                return CleanupResult(
                    success=False,
                    error_message=send_response.get('error', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                )
            
            signature = send_response['signature']
            logger.debug(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {signature}")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            confirm_response = await self.client.confirm_transaction(signature)
            
            if confirm_response.get('success'):
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ SOL (rent)
                estimated_sol_recovered = 2039280  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π rent –∑–∞ token account
                
                return CleanupResult(
                    success=True,
                    closed_accounts=[account_address],
                    sol_recovered=estimated_sol_recovered,
                    transaction_signatures=[signature]
                )
            else:
                return CleanupResult(
                    success=False,
                    error_message=confirm_response.get('error', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
                )
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è token account: {str(e)}"
            logger.error(error_msg)
            return CleanupResult(success=False, error_message=error_msg)
    
    async def _create_close_account_instruction(self, account_address: str) -> Optional[Instruction]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è token account.
        
        Args:
            account_address: –ê–¥—Ä–µ—Å account –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            
        Returns:
            Instruction –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è SPL Token account
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {account_address}")
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
            # from spl.token.instructions import close_account
            # return close_account(...)
            
            return None  # –ó–∞–≥–ª—É—à–∫–∞
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")
            return None
    
    async def _get_token_account_balance(self, account_address: str) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å token account.
        
        Args:
            account_address: –ê–¥—Ä–µ—Å token account
            
        Returns:
            –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
        """
        try:
            balance_response = await self.client.get_token_account_balance(account_address)
            
            if balance_response.get('success'):
                return balance_response.get('balance', 0)
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å {account_address}")
                return 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0
    
    async def _token_account_exists(self, account_address: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ token account.
        
        Args:
            account_address: –ê–¥—Ä–µ—Å token account
            
        Returns:
            True –µ—Å–ª–∏ account —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ getAccountInfo
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è account: {e}")
            return False
    
    async def _get_all_token_accounts(self, wallet_pubkey: Pubkey) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ token accounts –∫–æ—à–µ–ª—å–∫–∞.
        
        Args:
            wallet_pubkey: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ token accounts —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ getTokenAccountsByOwner
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ token accounts –¥–ª—è {wallet_pubkey}")
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è token accounts: {e}")
            return []


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def example_usage():
        """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SimpleCleanup"""
        print("üßπ –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø SIMPLE CLEANUP")
        print("=" * 50)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        
        print("‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   - SimpleClient")
        print("   - SimpleWallet") 
        print("   - AddressProvider")
        
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
        # cleanup = SimpleCleanup(client, wallet, address_provider)
        
        # –ü—Ä–∏–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
        # result = await cleanup.cleanup_after_sell("So11111111111111111111111111111111111111112")
        # print(f"üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏: {result}")
        
        # –ü—Ä–∏–º–µ—Ä –º–∞—Å—Å–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏
        # result = await cleanup.cleanup_all_empty_accounts()
        # print(f"üßπ –ú–∞—Å—Å–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞: {result}")
        
        print("\nüéØ SimpleCleanup –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(example_usage())
