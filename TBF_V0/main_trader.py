"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ pump.fun.
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ø–æ–∫—É–ø–∫–∞ ‚Üí –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 1 –º–∏–Ω—É—Ç–∞ ‚Üí –ø—Ä–æ–¥–∞–∂–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""

import asyncio
import logging
import sys
import time
from typing import Dict, Any, Optional
from dataclasses import dataclass
import argparse

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π TBF_V0
from core.simple_client import SimpleClient
from core.simple_wallet import SimpleWallet
from core.priority_fee.manager import PriorityFeeManager
from core.token_info import TokenInfo
from pumpfun.address_provider import AddressProvider
from pumpfun.instruction_builder import InstructionBuilder
from trading.simple_buyer import SimpleBuyer
from trading.simple_seller import SimpleSeller
from trading.simple_tpsl_manager import SimpleTpSlManager, MonitoringConfig
from cleanup.simple_cleanup import SimpleCleanup

@dataclass
class TradeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª—è
    listener_data: Optional[Dict[str, Any]] = None  # –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è
    sol_amount: float = 0.001  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    slippage_percent: float = 5.0  # –ü—Ä–æ—Ü–µ–Ω—Ç slippage
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_time_seconds: int = 60  # 1 –º–∏–Ω—É—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    take_profit_percent: float = 50.0  # 50% –ø—Ä–∏–±—ã–ª—å –¥–ª—è TP
    stop_loss_percent: float = 20.0   # 20% —É–±—ã—Ç–æ–∫ –¥–ª—è SL
    check_interval_seconds: float = 2.0  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    # –°–µ—Ç–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    rpc_endpoint: str = "https://api.devnet.solana.com"
    private_key: Optional[str] = None
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level: str = "INFO"
    log_to_file: bool = True


class MainTrader:
    """
    –ì–ª–∞–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä.
    """
    
    def __init__(self, config: TradeConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        self.config = config
        self.logger = self._setup_logging()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ (–±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ setup)
        self.client = None
        self.wallet = None
        self.address_provider = None
        self.instruction_builder = None
        self.priority_fee_manager = None
        self.buyer = None
        self.seller = None
        self.tpsl_manager = None
        self.cleanup = None
        
        self.logger.info("ü§ñ MainTrader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
    
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger = logging.getLogger("MainTrader")
        logger.setLevel(getattr(logging, self.config.log_level.upper()))
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö handlers
        for handler in logger.handlers[:]:
            logger.removeHandler(handler)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # Console handler
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        # File handler (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.config.log_to_file:
            file_handler = logging.FileHandler(
                f'trading_log_{int(time.time())}.log',
                encoding='utf-8'
            )
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
        
        return logger
    
    async def setup(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞.
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞...")
            
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            self.logger.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana RPC...")
            self.client = SimpleClient(self.config.rpc_endpoint)
            await self.client.connect()
            
            health = await self.client.get_health()
            if health != "ok":
                raise Exception(f"RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health}")
            self.logger.info(f"‚úÖ RPC –ø–æ–¥–∫–ª—é—á–µ–Ω: {health}")
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
            self.logger.info("üëõ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...")
            if not self.config.private_key:
                raise Exception("–ù–µ —É–∫–∞–∑–∞–Ω private_key")
            
            self.wallet = SimpleWallet()
            self.wallet.load_from_private_key(self.config.private_key)
            
            wallet_address = self.wallet.get_address_string()
            self.logger.info(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {wallet_address}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            balance_sol = await self.client.get_balance(wallet_address)
            self.logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance_sol:.6f} SOL")
            
            if balance_sol < self.config.sol_amount:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self.address_provider = AddressProvider()
            self.instruction_builder = InstructionBuilder()
            self.priority_fee_manager = PriorityFeeManager(self.client)
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.logger.info("üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self.buyer = SimpleBuyer(
                self.client, self.wallet, self.address_provider, 
                self.instruction_builder, self.priority_fee_manager
            )
            
            self.seller = SimpleSeller(
                self.client, self.wallet, self.address_provider,
                self.instruction_builder, self.priority_fee_manager
            )
            
            # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—á–∏—Å—Ç–∫–∏
            from pumpfun.curve_manager import CurveManager
            curve_manager = CurveManager()
            
            self.tpsl_manager = SimpleTpSlManager(curve_manager, self.client)
            self.cleanup = SimpleCleanup(self.client, self.wallet, self.address_provider)
            
            self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False
    
    async def execute_trade_cycle(self, token_info: TokenInfo) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏: –ø–æ–∫—É–ø–∫–∞ ‚Üí –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ‚Üí –ø—Ä–æ–¥–∞–∂–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        trade_start_time = time.time()
        results = {
            'success': False,
            'token_info': token_info.to_dict(),
            'start_time': trade_start_time,
            'phases': {}
        }
        
        try:
            self.logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–û–†–ì–û–í–û–ì–û –¶–ò–ö–õ–ê")
            self.logger.info("=" * 60)
            self.logger.info(f"üéØ –¢–æ–∫–µ–Ω: {token_info.symbol} ({token_info.name})")
            self.logger.info(f"üìç Mint: {token_info.mint}")
            self.logger.info(f"üîó Bonding Curve: {token_info.bonding_curve}")
            self.logger.info(f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {token_info.user}")
            self.logger.info(f"üí∞ –°—É–º–º–∞: {self.config.sol_amount} SOL")
            self.logger.info(f"‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {self.config.monitoring_time_seconds}s")
            
            # –§–ê–ó–ê 1: –ü–û–ö–£–ü–ö–ê
            self.logger.info("\nüìà –§–ê–ó–ê 1: –ü–û–ö–£–ü–ö–ê –¢–û–ö–ï–ù–ê")
            self.logger.info("-" * 30)
            
            buy_start = time.time()
            buy_result = await self.buyer.buy_token(
                token_info=token_info,
                sol_amount=self.config.sol_amount,
                slippage_percent=self.config.slippage_percent
            )
            buy_duration = time.time() - buy_start
            
            results['phases']['buy'] = {
                'success': buy_result.success,
                'duration': buy_duration,
                'signature': buy_result.transaction_signature,
                'error': buy_result.error_message
            }
            
            if not buy_result.success:
                self.logger.error(f"‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: {buy_result.error_message}")
                return results
            
            self.logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")
            self.logger.info(f"üìù Signature: {buy_result.transaction_signature}")
            self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏: {buy_duration:.2f}s")
            
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
            buy_price = self.config.sol_amount / (buy_result.tokens_received or 1000000)
            
            # –§–ê–ó–ê 2: –ú–û–ù–ò–¢–û–†–ò–ù–ì
            self.logger.info(f"\nüëÅÔ∏è –§–ê–ó–ê 2: –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–ò–ò ({self.config.monitoring_time_seconds}s)")
            self.logger.info("-" * 30)
            
            monitoring_config = MonitoringConfig(
                take_profit_percent=self.config.take_profit_percent,
                stop_loss_percent=self.config.stop_loss_percent,
                time_limit_seconds=self.config.monitoring_time_seconds,
                check_interval_seconds=self.config.check_interval_seconds
            )
            
            async def monitoring_callback(exit_reason, value):
                self.logger.info(f"üîî –°–∏–≥–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {exit_reason.value}, –∑–Ω–∞—á–µ–Ω–∏–µ: {value}")
            
            monitor_start = time.time()
            monitor_result = await self.tpsl_manager.start_monitoring(
                token_info=token_info,
                buy_price=buy_price,
                config=monitoring_config,
                callback=monitoring_callback
            )
            monitor_duration = time.time() - monitor_start
            
            results['phases']['monitor'] = {
                'success': True,
                'duration': monitor_duration,
                'should_sell': monitor_result.should_sell,
                'exit_reason': monitor_result.exit_reason.value if monitor_result.exit_reason else None,
                'profit_loss_percent': monitor_result.profit_loss_percent
            }
            
            self.logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            self.logger.info(f"   –ü—Ä–æ–¥–∞–≤–∞—Ç—å: {monitor_result.should_sell}")
            self.logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {monitor_result.exit_reason}")
            self.logger.info(f"   P&L: {monitor_result.profit_loss_percent:.2f}%" if monitor_result.profit_loss_percent else "   P&L: –Ω/–¥")
            
            # –§–ê–ó–ê 3: –ü–†–û–î–ê–ñ–ê
            self.logger.info("\nüìâ –§–ê–ó–ê 3: –ü–†–û–î–ê–ñ–ê –¢–û–ö–ï–ù–ê")
            self.logger.info("-" * 30)
            
            sell_start = time.time()
            sell_result = await self.seller.sell_all_tokens(
                token_info=token_info,
                slippage_percent=self.config.slippage_percent
            )
            sell_duration = time.time() - sell_start
            
            results['phases']['sell'] = {
                'success': sell_result.success,
                'duration': sell_duration,
                'signature': sell_result.transaction_signature,
                'sol_received': sell_result.sol_received,
                'error': sell_result.error_message
            }
            
            if not sell_result.success:
                self.logger.error(f"‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ—É–¥–∞—á–Ω–∞: {sell_result.error_message}")
            else:
                self.logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–∞!")
                self.logger.info(f"üìù Signature: {sell_result.transaction_signature}")
                self.logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ SOL: {(sell_result.sol_received or 0) / 1_000_000_000:.6f}")
                self.logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏: {sell_duration:.2f}s")
            
            # –§–ê–ó–ê 4: –û–ß–ò–°–¢–ö–ê
            self.logger.info("\nüßπ –§–ê–ó–ê 4: –û–ß–ò–°–¢–ö–ê")
            self.logger.info("-" * 30)
            
            cleanup_start = time.time()
            cleanup_result = await self.cleanup.cleanup_after_sell(token_info.mint)
            cleanup_duration = time.time() - cleanup_start
            
            results['phases']['cleanup'] = {
                'success': cleanup_result.success,
                'duration': cleanup_duration,
                'closed_accounts': len(cleanup_result.closed_accounts),
                'sol_recovered': cleanup_result.sol_recovered,
                'error': cleanup_result.error_message
            }
            
            if cleanup_result.success:
                self.logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                self.logger.info(f"üóëÔ∏è –ó–∞–∫—Ä—ã—Ç–æ accounts: {len(cleanup_result.closed_accounts)}")
                self.logger.info(f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ SOL: {cleanup_result.sol_recovered / 1_000_000_000:.6f}")
            else:
                self.logger.warning(f"‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {cleanup_result.error_message}")
            
            # –ò–¢–û–ì–ò
            total_duration = time.time() - trade_start_time
            results['success'] = buy_result.success and sell_result.success
            results['total_duration'] = total_duration
            
            self.logger.info("\nüèÅ –ò–¢–û–ì–ò –¢–û–†–ì–û–í–û–ì–û –¶–ò–ö–õ–ê")
            self.logger.info("=" * 60)
            self.logger.info(f"‚úÖ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–£–°–ü–ï–•' if results['success'] else '–ù–ï–£–î–ê–ß–ê'}")
            self.logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.2f}s")
            self.logger.info(f"üìä –§–∞–∑—ã:")
            for phase, data in results['phases'].items():
                status = "‚úÖ" if data['success'] else "‚ùå"
                self.logger.info(f"   {status} {phase.upper()}: {data['duration']:.2f}s")
            
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
            results['error'] = str(e)
            return results
    
    async def run(self, token_info: TokenInfo) -> bool:
        """
        –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
        
        Returns:
            True –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not await self.setup():
                return False
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            results = await self.execute_trade_cycle(token_info)
            
            return results['success']
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False
        finally:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if self.client:
                await self.client.close()
            self.logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è."""
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    listener_data = {
        'name': 'buy up',
        'symbol': 'buy up',
        'uri': 'https://ipfs.io/ipfs/Qmei5WUshDFeLJi5k8twgJZdKLC8g232r5RyjscjnTtjiT', 
        'mint': 'r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump', 
        'bondingCurve': 'AuUmsyXSAzKz4mTSEDX719rQvNpkz47rjbTn7QhU94SC',
        'associatedBondingCurve': 'CggVUQJEU2HWQRvMDAEiozNkPqKLMr5Mxc6zQPjnyrbz', 
        'user': '6pNDtUKGjbVVQLq8sQwdZW6heMuHAd6F5VpNSWfQvyfH'
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ TokenInfo –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª—è
    token_info = TokenInfo.from_listener_data(listener_data)
    print(f"üìä –°–æ–∑–¥–∞–Ω TokenInfo: {token_info}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–±–µ–∑ mint_address, –∏—Å–ø–æ–ª—å–∑—É–µ–º TokenInfo)
    config = TradeConfig(
        listener_data=listener_data,
        sol_amount=0.00001,
        private_key="YOUR_PRIVATE_KEY_HERE",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        slippage_percent=5.0,
        monitoring_time_seconds=60,
        take_profit_percent=50.0,
        stop_loss_percent=20.0,
        rpc_endpoint="https://api.devnet.solana.com",
        log_level="INFO"
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å TokenInfo
    trader = MainTrader(config)
    success = await trader.run(token_info)
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    print("ü§ñ –¢–û–†–ì–û–í–´–ô –ë–û–¢ PUMP.FUN (TBF_V0)")
    print("=" * 50)
    print("–í–ê–ñ–ù–û: –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π!")
    print("–ó–∞–º–µ–Ω–∏—Ç–µ listener_data –≤ main() –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è.")
    print("\n–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª—è:")
    print("{'name': 'TokenName', 'symbol': 'SYM', 'mint': '...', 'bondingCurve': '...'}")
    print("\n‚ö†Ô∏è  –ù–ï –ó–ê–ë–£–î–¨–¢–ï:")
    print("1. –ó–∞–º–µ–Ω–∏—Ç—å YOUR_PRIVATE_KEY_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
    print("2. –ó–∞–º–µ–Ω–∏—Ç—å listener_data –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å RPC endpoint (—Å–µ–π—á–∞—Å devnet)")
    print()
    
    asyncio.run(main())
