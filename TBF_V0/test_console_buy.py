#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.simple_client import SimpleClient
from core.simple_wallet import SimpleWallet
from trading.simple_buyer import SimpleBuyer
from core.priority_fee.manager import PriorityFeeManager
from pumpfun.instruction_builder import InstructionBuilder
from core.token_info import TokenInfo

async def test_console_buy():
    """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å"""
    
    print("üî¨ –¢–ï–°–¢ –ü–û–ö–£–ü–ö–ò –° –ö–û–ù–°–û–õ–¨–ù–´–ú –í–´–í–û–î–û–ú")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    RPC_ENDPOINT = "https://mainnet.helius-rpc.com/?api-key=e6fa031e-699e-49ed-9672-4582bdb4950d"
    PRIVATE_KEY = "S8AmRgsyBPMqQL8BkY8PJoo7Gxj31HZZzpNWhfzUXwEkdQu56AJT9LSixAqGzAcR2b1W9XnuRPykZeZ9A6AXRRv"
    
    # –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
    listener_data = {
        'name': 'buy up',
        'symbol': 'buy up', 
        'uri': 'https://ipfs.io/ipfs/Qmei5WUshDFeLJi5k8twgJZdKLC8g232r5RyjscjnTtjiT',
        'mint': 'r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump',
        'bondingCurve': 'AuUmsyXSAzKz4mTSEDX719rQvNpkz47rjbTn7QhU94SC',
        'associatedBondingCurve': 'CggVUQJEU2HWQRvMDAEiozNkPqKLMr5Mxc6zQPjnyrbz',
        'user': '6pNDtUKGjbVVQLq8sQwdZW6heMuHAd6F5VpNSWfQvyfH'
    }
    
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ö–ª–∏–µ–Ω—Ç
        client = SimpleClient(RPC_ENDPOINT)
        await client.connect()
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ö–æ—à–µ–ª–µ–∫
        wallet = SimpleWallet()
        wallet.load_from_private_key(PRIVATE_KEY)
        print(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {wallet.get_public_key()}")
        
        # –ë–∞–ª–∞–Ω—Å
        balance = await client.get_balance(str(wallet.get_public_key()))
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} SOL")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        from pumpfun.address_provider import AddressProvider
        
        priority_fee_manager = PriorityFeeManager(client)
        instruction_builder = InstructionBuilder()
        address_provider = AddressProvider()
        buyer = SimpleBuyer(client, wallet, address_provider, instruction_builder, priority_fee_manager)
        print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # TokenInfo
        token_info = TokenInfo.from_listener_data(listener_data)
        print(f"‚úÖ TokenInfo —Å–æ–∑–¥–∞–Ω: {token_info.name}")
        
        print("\nüõí –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ö–£–ü–ö–£...")
        print("-" * 30)
        
        # –ü–æ–∫—É–ø–∫–∞
        result = await buyer.buy_token(
            token_info=token_info,
            sol_amount=0.001,
            slippage_percent=15.0
        )
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ö–£–ü–ö–ò:")
        print("-" * 30)
        print(f"Success: {result.success}")
        print(f"Error: {result.error_message}")
        print(f"Signature: {result.transaction_signature}")
        print(f"Tokens: {result.tokens_received}")
        print(f"SOL spent: {result.sol_spent}")
        
        if result.success:
            print("\nüéâ –ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê!")
        else:
            print("\n‚ùå –ü–û–ö–£–ü–ö–ê –ù–ï–£–î–ê–ß–ù–ê!")
        
        await client.close()
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_console_buy())
