"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
–í–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–∑–∫–∏—Ö –º–µ—Å—Ç.
"""

import asyncio
import logging
import sys
import time
from pathlib import Path
from typing import Dict, Any, List
from dataclasses import dataclass
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ TBF_V0 –≤ sys.path
sys.path.append(str(Path(__file__).parent))

from core.token_info import TokenInfo
from main_trader import MainTrader, TradeConfig


@dataclass
class PerformanceMetric:
    """–ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏."""
    function_name: str
    start_time: float
    end_time: float
    duration_ms: float
    success: bool
    error: str = None


class PerformanceProfiler:
    """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π."""
    
    def __init__(self):
        self.metrics: List[PerformanceMetric] = []
        self.logger = logging.getLogger("performance")
    
    async def measure_async_function(self, func_name: str, func, *args, **kwargs):
        """–ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        start_time = time.perf_counter()
        success = True
        error = None
        result = None
        
        try:
            self.logger.info(f"‚è±Ô∏è  –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {func_name}")
            result = await func(*args, **kwargs)
            self.logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {func_name}")
        except Exception as e:
            success = False
            error = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func_name}: {error}")
            raise
        finally:
            end_time = time.perf_counter()
            duration_ms = (end_time - start_time) * 1000
            
            metric = PerformanceMetric(
                function_name=func_name,
                start_time=start_time,
                end_time=end_time,
                duration_ms=duration_ms,
                success=success,
                error=error
            )
            self.metrics.append(metric)
            
            self.logger.info(f"üìä {func_name}: {duration_ms:.2f} –º—Å")
        
        return result
    
    def measure_sync_function(self, func_name: str, func, *args, **kwargs):
        """–ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        start_time = time.perf_counter()
        success = True
        error = None
        result = None
        
        try:
            self.logger.info(f"‚è±Ô∏è  –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {func_name}")
            result = func(*args, **kwargs)
            self.logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {func_name}")
        except Exception as e:
            success = False
            error = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {func_name}: {error}")
            raise
        finally:
            end_time = time.perf_counter()
            duration_ms = (end_time - start_time) * 1000
            
            metric = PerformanceMetric(
                function_name=func_name,
                start_time=start_time,
                end_time=end_time,
                duration_ms=duration_ms,
                success=success,
                error=error
            )
            self.metrics.append(metric)
            
            self.logger.info(f"üìä {func_name}: {duration_ms:.2f} –º—Å")
        
        return result
    
    def get_performance_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        if not self.metrics:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        total_time = sum(m.duration_ms for m in self.metrics)
        successful_calls = [m for m in self.metrics if m.success]
        failed_calls = [m for m in self.metrics if not m.success]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–µ)
        sorted_metrics = sorted(self.metrics, key=lambda x: x.duration_ms, reverse=True)
        
        report = {
            "summary": {
                "total_functions": len(self.metrics),
                "successful_calls": len(successful_calls),
                "failed_calls": len(failed_calls),
                "total_time_ms": total_time,
                "average_time_ms": total_time / len(self.metrics) if self.metrics else 0
            },
            "slowest_functions": [
                {
                    "name": m.function_name,
                    "duration_ms": m.duration_ms,
                    "percentage": (m.duration_ms / total_time) * 100 if total_time > 0 else 0
                }
                for m in sorted_metrics[:10]  # –¢–æ–ø 10 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö
            ],
            "failed_functions": [
                {
                    "name": m.function_name,
                    "error": m.error,
                    "duration_ms": m.duration_ms
                }
                for m in failed_calls
            ],
            "detailed_metrics": [
                {
                    "name": m.function_name,
                    "duration_ms": m.duration_ms,
                    "success": m.success,
                    "error": m.error
                }
                for m in self.metrics
            ]
        }
        
        return report
    
    def print_performance_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        report = self.get_performance_report()
        
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("="*80)
        
        summary = report["summary"]
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {summary['total_functions']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {summary['successful_calls']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary['failed_calls']}")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary['total_time_ms']:.2f} –º—Å")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {summary['average_time_ms']:.2f} –º—Å")
        
        print(f"\nüêå –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        for func in report["slowest_functions"][:5]:
            print(f"   {func['name']}: {func['duration_ms']:.2f} –º—Å ({func['percentage']:.1f}%)")
        
        if report["failed_functions"]:
            print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            for func in report["failed_functions"]:
                print(f"   {func['name']}: {func['error']}")
        
        print("="*80)


def setup_detailed_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö handlers
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)
    
    # File handler –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
    file_handler = logging.FileHandler(
        log_dir / 'real_buy_performance.log',
        encoding='utf-8',
        mode='w'
    )
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    root_logger.addHandler(file_handler)
    
    print(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {log_dir / 'real_buy_performance.log'}")


async def test_real_token_purchase():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    profiler = PerformanceProfiler()
    logger = logging.getLogger("real_buy_test")
    
    print("üöÄ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –ü–û–ö–£–ü–ö–ò –¢–û–ö–ï–ù–ê –° –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï–ú")
    print("="*80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ mainnet!")
    print("üí∞ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL")
    print("üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞")
    print()
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ TokenInfo
        logger.info("üß™ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ TokenInfo –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª—è")
        
        listener_data = {
            'name': 'TROLL COIN',
            'symbol': 'TROLL COIN',
            'uri': 'https://ipfs.io/ipfs/bafkreib5hc7ubyb2lublh43bwgke465vcmzfzw5gvmtpehvwpcac7gazlu',
            'mint': 'Cs64tSzj49EP5GKFZPXB9qXDp27wSMgJT9HPZmyrpump',
            'bondingCurve': 'DyGTjGW7DXqGGutRAn4yvSqkfj5EtFZ3wALcctFT233a',
            'associatedBondingCurve': 'DmHUXyDfC3yHZaG9dSqusdcGbTBwsqurvYitR5UqnRAo',
            'user': 'GPcsmRJK9rYzbFLLgVWyYaT6cS8o5iCZpLTrTwkfqj9C'
        }

        # {'name': 'TROLL COIN\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        # 'symbol': 'TROLLCOIN\x00',
        # 'uri': 'https://ipfs.io/ipfs/bafkreib5hc7ubyb2lublh43bwgke465vcmzfzw5gvmtpehvwpcac7gazlu\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        # 'mint': 'Cs64tSzj49EP5GKFZPXB9qXDp27wSMgJT9HPZmyrpump',
        # 'bondingCurve': 'DyGTjGW7DXqGGutRAn4yvSqkfj5EtFZ3wALcctFT233a',
        # 'associatedBondingCurve': 'DmHUXyDfC3yHZaG9dSqusdcGbTBwsqurvYitR5UqnRAo',
        # 'user': 'GPcsmRJK9rYzbFLLgVWyYaT6cS8o5iCZpLTrTwkfqj9C'}



        token_info = profiler.measure_sync_function(
            "TokenInfo.from_listener_data",
            TokenInfo.from_listener_data,
            listener_data
        )
        
        logger.info(f"‚úÖ TokenInfo —Å–æ–∑–¥–∞–Ω: {token_info.symbol}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("üß™ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        
        config = profiler.measure_sync_function(
            "TradeConfig.creation",
            lambda: TradeConfig(
                listener_data=listener_data,
                sol_amount=0.0001,  # 0.0001 SOL –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                slippage_percent=15.0,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π slippage –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
                monitoring_time_seconds=60,
                take_profit_percent=200.0,
                stop_loss_percent=50.0,
                rpc_endpoint="https://mainnet.helius-rpc.com/?api-key=e6fa031e-699e-49ed-9672-4582bdb4950d",
                private_key= "",#real private key,
                log_level="DEBUG"
            )
        )
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.sol_amount} SOL")
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
        logger.info("üß™ –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        
        trader = profiler.measure_sync_function(
            "MainTrader.creation",
            MainTrader,
            config
        )
        
        # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.info("üß™ –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞")
        
        setup_success = await profiler.measure_async_function(
            "MainTrader.setup",
            trader.setup
        )
        
        if not setup_success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞")
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        logger.info("üß™ –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞")
        
        wallet_address = trader.wallet.get_address_string()
        balance = await profiler.measure_async_function(
            "SimpleClient.get_balance",
            trader.client.get_balance,
            wallet_address
        )
        
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance:.6f} SOL")
        
        if balance < config.sol_amount:
            raise Exception(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL! –ù—É–∂–Ω–æ: {config.sol_amount}, –µ—Å—Ç—å: {balance}")
        
        # 6. –†–ï–ê–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –¢–û–ö–ï–ù–ê
        logger.info("üß™ –®–∞–≥ 6: –†–ï–ê–õ–¨–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –¢–û–ö–ï–ù–ê")
        logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!")
        
        buy_result = await profiler.measure_async_function(
            "SimpleBuyer.buy_token",
            trader.buyer.buy_token,
            token_info=token_info,
            sol_amount=config.sol_amount,
            slippage_percent=config.slippage_percent
        )
        
        logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ö–£–ü–ö–ò:")
        logger.info(f"   Success: {buy_result.success}")
        logger.info(f"   Error message: {buy_result.error_message}")
        logger.info(f"   Transaction signature: {buy_result.transaction_signature}")
        logger.info(f"   Tokens received: {buy_result.tokens_received}")
        logger.info(f"   SOL spent: {buy_result.sol_spent}")
        
        if buy_result.success:
            logger.info(f"üéâ –ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê!")
            logger.info(f"   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {buy_result.transaction_signature}")
            logger.info(f"   –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {buy_result.tokens_received}")
            logger.info(f"   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {buy_result.sol_spent}")
        else:
            logger.error(f"‚ùå –ü–û–ö–£–ü–ö–ê –ù–ï–£–î–ê–ß–ù–ê: {buy_result.error_message}")
        
        # 7. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await profiler.measure_async_function(
            "SimpleClient.close",
            trader.client.close
        )
        
        # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info("üß™ –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        profiler.print_performance_report()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report = profiler.get_performance_report()
        with open("logs/performance_report.json", "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        logger.info("üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ logs/performance_report.json")
        
        return buy_result.success if buy_result else False
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        
        # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        profiler.print_performance_report()
        
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üî¨ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –ü–û–ö–£–ü–ö–ò –° –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï–ú –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 80)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_detailed_logging()
    
    logger = logging.getLogger("main")
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ê –†–ï–ê–õ–¨–ù–û–ô –ü–û–ö–£–ü–ö–ò")
    
    try:
        success = await test_real_token_purchase()
        
        if success:
            print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω")
            print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        else:
            print("\n‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô")
            print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
