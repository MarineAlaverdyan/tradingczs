"""
AddressProvider –¥–ª—è pump.fun - —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã pump.fun –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PDA –∞–¥—Ä–µ—Å–æ–≤.
"""

from solders.pubkey import Pubkey
from typing import Tuple


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã pump.fun –ø—Ä–æ–≥—Ä–∞–º–º—ã
PUMP_PROGRAM_ID = Pubkey.from_string("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P")
PUMP_GLOBAL = Pubkey.from_string("4wTV1YmiEkRvAtNtsSGPtUrqRYQMe5db6hjPuMkCjDQF")
PUMP_EVENT_AUTHORITY = Pubkey.from_string("Ce6TQqeHC9p8KetsN6JsjHK7UTZk7nasjjnr7XxXp9F1")
PUMP_FEE = Pubkey.from_string("CebN5WGQ4jvEPvsVU4EoHEpgzq1VV7AbicfhtW4xC9iM")

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
SYSTEM_PROGRAM_ID = Pubkey.from_string("11111111111111111111111111111111")
TOKEN_PROGRAM_ID = Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")
ASSOCIATED_TOKEN_PROGRAM_ID = Pubkey.from_string("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL")
RENT_PROGRAM_ID = Pubkey.from_string("SysvarRent111111111111111111111111111111111")

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
METADATA_PROGRAM_ID = Pubkey.from_string("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")

# Seeds –¥–ª—è PDA —Ä–∞—Å—á–µ—Ç–æ–≤
BONDING_CURVE_SEED = b"bonding-curve"
METADATA_SEED = b"metadata"


class AddressProvider:
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è pump.fun –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    @staticmethod
    def get_bonding_curve_address(mint: Pubkey) -> Tuple[Pubkey, int]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–¥—Ä–µ—Å bonding curve –¥–ª—è —Ç–æ–∫–µ–Ω–∞.
        
        Args:
            mint: –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            Tuple[Pubkey, int]: (–∞–¥—Ä–µ—Å bonding curve, bump)
        """
        try:
            bonding_curve, bump = Pubkey.find_program_address(
                [BONDING_CURVE_SEED, bytes(mint)],
                PUMP_PROGRAM_ID
            )
            return bonding_curve, bump
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ bonding curve –∞–¥—Ä–µ—Å–∞: {e}")
    
    @staticmethod
    def get_associated_bonding_curve_address(mint: Pubkey) -> Tuple[Pubkey, int]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–¥—Ä–µ—Å associated bonding curve —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞.
        
        Args:
            mint: –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            Tuple[Pubkey, int]: (–∞–¥—Ä–µ—Å associated bonding curve, bump)
        """
        try:
            bonding_curve, _ = AddressProvider.get_bonding_curve_address(mint)
            
            associated_bonding_curve, bump = Pubkey.find_program_address(
                [
                    bytes(bonding_curve),
                    bytes(TOKEN_PROGRAM_ID),
                    bytes(mint)
                ],
                ASSOCIATED_TOKEN_PROGRAM_ID
            )
            return associated_bonding_curve, bump
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ associated bonding curve –∞–¥—Ä–µ—Å–∞: {e}")
    
    @staticmethod
    def get_associated_token_address(wallet: Pubkey, mint: Pubkey) -> Pubkey:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–¥—Ä–µ—Å associated token account –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞.
        
        Args:
            wallet: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
            mint: –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            –ê–¥—Ä–µ—Å associated token account
        """
        try:
            associated_token_address, _ = Pubkey.find_program_address(
                [
                    bytes(wallet),
                    bytes(TOKEN_PROGRAM_ID),
                    bytes(mint)
                ],
                ASSOCIATED_TOKEN_PROGRAM_ID
            )
            return associated_token_address
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ associated token –∞–¥—Ä–µ—Å–∞: {e}")
    
    @staticmethod
    def get_metadata_address(mint: Pubkey) -> Tuple[Pubkey, int]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞–¥—Ä–µ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞.
        
        Args:
            mint: –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            Tuple[Pubkey, int]: (–∞–¥—Ä–µ—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, bump)
        """
        try:
            metadata_address, bump = Pubkey.find_program_address(
                [
                    METADATA_SEED,
                    bytes(METADATA_PROGRAM_ID),
                    bytes(mint)
                ],
                METADATA_PROGRAM_ID
            )
            return metadata_address, bump
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ metadata –∞–¥—Ä–µ—Å–∞: {e}")
    
    @staticmethod
    def get_all_addresses(mint: Pubkey, wallet: Pubkey) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Ç–æ–∫–µ–Ω–æ–º.
        
        Args:
            mint: –ê–¥—Ä–µ—Å mint —Ç–æ–∫–µ–Ω–∞
            wallet: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
        """
        try:
            bonding_curve, bonding_curve_bump = AddressProvider.get_bonding_curve_address(mint)
            associated_bonding_curve, abc_bump = AddressProvider.get_associated_bonding_curve_address(mint)
            associated_token_account = AddressProvider.get_associated_token_address(wallet, mint)
            metadata, metadata_bump = AddressProvider.get_metadata_address(mint)
            
            return {
                # –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                "mint": mint,
                "wallet": wallet,
                
                # PDA –∞–¥—Ä–µ—Å–∞
                "bonding_curve": bonding_curve,
                "bonding_curve_bump": bonding_curve_bump,
                "associated_bonding_curve": associated_bonding_curve,
                "associated_bonding_curve_bump": abc_bump,
                "associated_token_account": associated_token_account,
                "metadata": metadata,
                "metadata_bump": metadata_bump,
                
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                "pump_program": PUMP_PROGRAM_ID,
                "system_program": SYSTEM_PROGRAM_ID,
                "token_program": TOKEN_PROGRAM_ID,
                "associated_token_program": ASSOCIATED_TOKEN_PROGRAM_ID,
                "rent_program": RENT_PROGRAM_ID,
                
                # pump.fun –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                "pump_global": PUMP_GLOBAL,
                "pump_event_authority": PUMP_EVENT_AUTHORITY,
                "pump_fee": PUMP_FEE,
            }
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤: {e}")
    
    @staticmethod
    def validate_mint_address(mint_str: str) -> Pubkey:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É mint –∞–¥—Ä–µ—Å–∞ –≤ Pubkey.
        
        Args:
            mint_str: Mint –∞–¥—Ä–µ—Å –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            
        Returns:
            –í–∞–ª–∏–¥–Ω—ã–π Pubkey –æ–±—ä–µ–∫—Ç
            
        Raises:
            Exception: –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        """
        try:
            return Pubkey.from_string(mint_str)
        except Exception as e:
            raise Exception(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π mint –∞–¥—Ä–µ—Å '{mint_str}': {e}")
    
    @staticmethod
    def validate_wallet_address(wallet_str: str) -> Pubkey:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É wallet –∞–¥—Ä–µ—Å–∞ –≤ Pubkey.
        
        Args:
            wallet_str: Wallet –∞–¥—Ä–µ—Å –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            
        Returns:
            –í–∞–ª–∏–¥–Ω—ã–π Pubkey –æ–±—ä–µ–∫—Ç
            
        Raises:
            Exception: –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
        """
        try:
            return Pubkey.from_string(wallet_str)
        except Exception as e:
            raise Exception(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π wallet –∞–¥—Ä–µ—Å '{wallet_str}': {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AddressProvider."""
    
    print("üè† –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å AddressProvider")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ devnet –∞–¥—Ä–µ—Å–∞)
    test_mint = Pubkey.from_string("11111111111111111111111111111111")  # System Program
    test_wallet = Pubkey.from_string("11111111111111111111111111111111")
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤...")
        mint_pubkey = AddressProvider.validate_mint_address("11111111111111111111111111111111")
        wallet_pubkey = AddressProvider.validate_wallet_address("11111111111111111111111111111111")
        print(f"   Mint: {mint_pubkey}")
        print(f"   Wallet: {wallet_pubkey}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º bonding curve
        print("\nüìà –†–∞—Å—á–µ—Ç bonding curve...")
        bonding_curve, bc_bump = AddressProvider.get_bonding_curve_address(mint_pubkey)
        print(f"   Bonding Curve: {bonding_curve}")
        print(f"   Bump: {bc_bump}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º associated bonding curve
        print("\nüîó –†–∞—Å—á–µ—Ç associated bonding curve...")
        abc, abc_bump = AddressProvider.get_associated_bonding_curve_address(mint_pubkey)
        print(f"   Associated Bonding Curve: {abc}")
        print(f"   Bump: {abc_bump}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º associated token account
        print("\nüí∞ –†–∞—Å—á–µ—Ç associated token account...")
        ata = AddressProvider.get_associated_token_address(wallet_pubkey, mint_pubkey)
        print(f"   Associated Token Account: {ata}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º metadata
        print("\nüìù –†–∞—Å—á–µ—Ç metadata...")
        metadata, meta_bump = AddressProvider.get_metadata_address(mint_pubkey)
        print(f"   Metadata: {metadata}")
        print(f"   Bump: {meta_bump}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ —Å—Ä–∞–∑—É
        print("\nüìã –í—Å–µ –∞–¥—Ä–µ—Å–∞:")
        all_addresses = AddressProvider.get_all_addresses(mint_pubkey, wallet_pubkey)
        
        for key, value in all_addresses.items():
            if isinstance(value, Pubkey):
                print(f"   {key}: {value}")
            else:
                print(f"   {key}: {value}")
        
        print("\n‚úÖ –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    try:
        AddressProvider.validate_mint_address("invalid_address")
    except Exception as e:
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
