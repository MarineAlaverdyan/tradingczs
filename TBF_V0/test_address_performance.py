"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AddressProvider - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—á–µ—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤.
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—á–µ—Ç–∞ vs –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è.
"""

import time
import statistics
from typing import List, Dict
from solders.pubkey import Pubkey

from pumpfun.address_provider import AddressProvider


def measure_execution_time(func, *args, **kwargs) -> tuple:
    """–ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏."""
    start_time = time.perf_counter()
    result = func(*args, **kwargs)
    end_time = time.perf_counter()
    execution_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    return result, execution_time


def run_performance_tests(iterations: int = 1000) -> Dict[str, List[float]]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    print(f"üöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AddressProvider")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {iterations}")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_mint = Pubkey.from_string("r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump")
    test_wallet = Pubkey.from_string("6pNDtUKGjbVVQLq8sQwdZW6heMuHAd6F5VpNSWfQvyfH")
    
    results = {
        "bonding_curve": [],
        "associated_bonding_curve": [],
        "associated_token_account": [],
        "metadata": [],
        "all_addresses": []
    }
    
    print("‚è±Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç bonding curve
    print("1Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bonding_curve_address...")
    for i in range(iterations):
        _, exec_time = measure_execution_time(
            AddressProvider.get_bonding_curve_address, 
            test_mint
        )
        results["bonding_curve"].append(exec_time)
        
        if (i + 1) % 100 == 0:
            print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {i + 1}/{iterations}")
    
    # –¢–µ—Å—Ç 2: –†–∞—Å—á–µ—Ç associated bonding curve
    print("2Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ associated_bonding_curve_address...")
    for i in range(iterations):
        _, exec_time = measure_execution_time(
            AddressProvider.get_associated_bonding_curve_address,
            test_mint
        )
        results["associated_bonding_curve"].append(exec_time)
        
        if (i + 1) % 100 == 0:
            print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {i + 1}/{iterations}")
    
    # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç associated token account
    print("3Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ associated_token_address...")
    for i in range(iterations):
        _, exec_time = measure_execution_time(
            AddressProvider.get_associated_token_address,
            test_wallet,
            test_mint
        )
        results["associated_token_account"].append(exec_time)
        
        if (i + 1) % 100 == 0:
            print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {i + 1}/{iterations}")
    
    # –¢–µ—Å—Ç 4: –†–∞—Å—á–µ—Ç metadata
    print("4Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ metadata_address...")
    for i in range(iterations):
        _, exec_time = measure_execution_time(
            AddressProvider.get_metadata_address,
            test_mint
        )
        results["metadata"].append(exec_time)
        
        if (i + 1) % 100 == 0:
            print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {i + 1}/{iterations}")
    
    # –¢–µ—Å—Ç 5: –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å—Ä–∞–∑—É
    print("5Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_all_addresses...")
    for i in range(iterations):
        _, exec_time = measure_execution_time(
            AddressProvider.get_all_addresses,
            test_mint,
            test_wallet
        )
        results["all_addresses"].append(exec_time)
        
        if (i + 1) % 100 == 0:
            print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {i + 1}/{iterations}")
    
    return results


def analyze_results(results: Dict[str, List[float]]) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    print("\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    for operation, times in results.items():
        mean_time = statistics.mean(times)
        median_time = statistics.median(times)
        min_time = min(times)
        max_time = max(times)
        std_dev = statistics.stdev(times) if len(times) > 1 else 0
        
        print(f"\nüîß {operation.upper().replace('_', ' ')}:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {mean_time:.4f} –º—Å")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞: {median_time:.4f} –º—Å")
        print(f"   –ú–∏–Ω–∏–º—É–º: {min_time:.4f} –º—Å")
        print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_time:.4f} –º—Å")
        print(f"   –°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_dev:.4f} –º—Å")


def compare_with_listener_data() -> None:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è."""
    
    print("\nüÜö –°–†–ê–í–ù–ï–ù–ò–ï: –†–ê–°–ß–ï–¢ vs –ì–û–¢–û–í–´–ï –î–ê–ù–ù–´–ï –û–¢ –°–õ–£–®–ê–¢–ï–õ–Ø")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è (–≥–æ—Ç–æ–≤—ã–µ)
    listener_data = {
        'mint': 'r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump',
        'bondingCurve': 'AuUmsyXSAzKz4mTSEDX719rQvNpkz47rjbTn7QhU94SC',
        'associatedBondingCurve': 'CggVUQJEU2HWQRvMDAEiozNkPqKLMr5Mxc6zQPjnyrbz',
        'user': '6pNDtUKGjbVVQLq8sQwdZW6heMuHAd6F5VpNSWfQvyfH'
    }
    
    test_mint = Pubkey.from_string(listener_data['mint'])
    test_wallet = Pubkey.from_string(listener_data['user'])
    
    iterations = 100
    
    # –í—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è...")
    listener_times = []
    
    for _ in range(iterations):
        start_time = time.perf_counter()
        
        # –ü—Ä–æ—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ Pubkey (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)
        mint = Pubkey.from_string(listener_data['mint'])
        bonding_curve = Pubkey.from_string(listener_data['bondingCurve'])
        associated_bc = Pubkey.from_string(listener_data['associatedBondingCurve'])
        user = Pubkey.from_string(listener_data['user'])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ATA –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—Ç–æ –Ω—É–∂–Ω–æ)
        ata = AddressProvider.get_associated_token_address(user, mint)
        
        end_time = time.perf_counter()
        listener_times.append((end_time - start_time) * 1000)
    
    # –í—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤...")
    calculation_times = []
    
    for _ in range(iterations):
        start_time = time.perf_counter()
        
        # –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤
        all_addresses = AddressProvider.get_all_addresses(test_mint, test_wallet)
        
        end_time = time.perf_counter()
        calculation_times.append((end_time - start_time) * 1000)
    
    # –ê–Ω–∞–ª–∏–∑
    listener_avg = statistics.mean(listener_times)
    calculation_avg = statistics.mean(calculation_times)
    speedup = calculation_avg / listener_avg
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:")
    print(f"   –ì–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è: {listener_avg:.4f} –º—Å")
    print(f"   –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∞–¥—Ä–µ—Å–æ–≤: {calculation_avg:.4f} –º—Å")
    print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–ª—É—à–∞—Ç–µ–ª—è: {speedup:.2f}x")
    print(f"   –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {calculation_avg - listener_avg:.4f} –º—Å")


def analyze_pda_operations() -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∞–º—ã–µ –∑–∞—Ç—Ä–∞—Ç–Ω—ã–µ –≤ PDA —Ä–∞—Å—á–µ—Ç–∞—Ö."""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó PDA –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 60)
    
    test_mint = Pubkey.from_string("r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump")
    test_wallet = Pubkey.from_string("6pNDtUKGjbVVQLq8sQwdZW6heMuHAd6F5VpNSWfQvyfH")
    
    iterations = 500
    
    operations = {
        "find_program_address (bonding_curve)": lambda: Pubkey.find_program_address(
            [b"bonding-curve", bytes(test_mint)],
            AddressProvider.PUMP_PROGRAM_ID
        ),
        "find_program_address (associated_token)": lambda: Pubkey.find_program_address(
            [bytes(test_wallet), bytes(AddressProvider.TOKEN_PROGRAM_ID), bytes(test_mint)],
            AddressProvider.ASSOCIATED_TOKEN_PROGRAM_ID
        ),
        "string_to_pubkey": lambda: Pubkey.from_string("r8VCbeoXdsQ7RcXT9DF3CnJ2Fqdx9uNWywsV8Wepump"),
        "pubkey_to_bytes": lambda: bytes(test_mint),
    }
    
    for op_name, op_func in operations.items():
        times = []
        
        for _ in range(iterations):
            _, exec_time = measure_execution_time(op_func)
            times.append(exec_time)
        
        avg_time = statistics.mean(times)
        print(f"   {op_name}: {avg_time:.6f} –º—Å")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    
    print("üî¨ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AddressProvider")
    print("=" * 80)
    print("üìù –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤ vs –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print()
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        results = run_performance_tests(iterations=500)
        analyze_results(results)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–ª—É—à–∞—Ç–µ–ª—è
        compare_with_listener_data()
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö PDA –æ–ø–µ—Ä–∞—Ü–∏–π
        analyze_pda_operations()
        
        print("\n" + "=" * 80)
        print("üéØ –í–´–í–û–î–´:")
        print("1Ô∏è‚É£  –†–∞—Å—á–µ—Ç PDA –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
        print("2Ô∏è‚É£  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ")
        print("3Ô∏è‚É£  find_program_address() - —Å–∞–º–∞—è –∑–∞—Ç—Ä–∞—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
        print("4Ô∏è‚É£  –í —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –∫–∞–∂–¥–∞—è –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞")
        print("5Ô∏è‚É£  –ü–æ—ç—Ç–æ–º—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
